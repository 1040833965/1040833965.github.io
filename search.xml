<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/01/hello-world/"/>
      <url>/2022/11/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hi,Nginx!</title>
      <link href="/2022/10/16/hi,Nginx!/"/>
      <url>/2022/10/16/hi,Nginx!/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Hi-Nginx"><a href="#Hi-Nginx" class="headerlink" title="Hi,Nginx!"></a>Hi,Nginx!</h1><h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><p>Nginx是一款轻量级的web服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器。其特点是占有内存少，并</p><p>发能力强，事实上nginx的并发能力在同类型的网贝服务奋中表现较好，中国人西使用 nginx的网站有：百度、京东、新浪、网易、腾讯、淘宝等。</p><p>Nginx是由<strong>伊戈尔·赛索耶夫</strong>为俄罗斯访问量第二的Rambler .ru站点开发的，</p><p>第一个公开版本0.1.0发布于2004年10月4日。</p><br><p>官网：</p><h2 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h2><p>下载页面：</p><p>挑选需要的版本</p><p>安装步骤：</p><p>1.安装依赖包 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><p>2.下载Nginx安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure><p>3.解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure><p>4.cd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd  nginx-1.16.1</span><br><span class="line">mkdir -p /usr/local/nginx</span><br></pre></td></tr></table></figure><ol start="5"><li>检查环境</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure><p>6.安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="Nginx目录结构"><a href="#Nginx目录结构" class="headerlink" title="Nginx目录结构"></a>Nginx目录结构</h2><p>cd进入nginx安装目录中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/loacl/Nginx</span><br><span class="line">ls</span><br><span class="line">//发现有四个目录</span><br><span class="line">conf  html  logs  sbin</span><br></pre></td></tr></table></figure><p>重点目录&#x2F;文件梳理</p><ul><li>conf&#x2F;nginx.confnginx配置文件</li><li>html    存放静态文件（html、CSS、Js等）</li><li>logs 日志目录，存放日志文件</li><li>sbin&#x2F;nginx 二进制文件，用于启动、停止Nginx服务</li></ul><p>安装tree</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install tree </span><br></pre></td></tr></table></figure><p>安装完毕后使用tree命令，当前文件夹下的目录结构就会像树形一样展示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">├── conf</span><br><span class="line">│   ├── fastcgi.conf</span><br><span class="line">│   ├── fastcgi.conf.default</span><br><span class="line">│   ├── fastcgi_params</span><br><span class="line">│   ├── fastcgi_params.default</span><br><span class="line">│   ├── koi-utf</span><br><span class="line">│   ├── koi-win</span><br><span class="line">│   ├── mime.types</span><br><span class="line">│   ├── mime.types.default</span><br><span class="line">│   ├── nginx.conf</span><br><span class="line">│   ├── nginx.conf.default</span><br><span class="line">│   ├── scgi_params</span><br><span class="line">│   ├── scgi_params.default</span><br><span class="line">│   ├── uwsgi_params</span><br><span class="line">│   ├── uwsgi_params.default</span><br><span class="line">│   └── win-utf</span><br><span class="line">├── html</span><br><span class="line">│   ├── 50x.html</span><br><span class="line">│   └── index.html</span><br><span class="line">├── logs</span><br><span class="line">└── sbin</span><br><span class="line">    └── nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql主从复制、读写分离</title>
      <link href="/2022/10/16/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2022/10/16/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql主从复制、读写分离"><a href="#Mysql主从复制、读写分离" class="headerlink" title="Mysql主从复制、读写分离"></a>Mysql主从复制、读写分离</h1><h2 id="1-主从复制"><a href="#1-主从复制" class="headerlink" title="1.主从复制"></a>1.主从复制</h2><p>什么是mysql主从复制？</p><p>MySQL主从复制是一个异步的复制过程，底层是基于Nysql数据库自带的<strong>二进制日志</strong>功能。就是一台或多台MysQL数据库(slave，即<strong>从库</strong>)</p><p>从另一台MySQL数据库(master，即主库）进行日志的复制然后再解析日志并应用到自身，最终实现<strong>从库</strong>的数据和<strong>主库</strong></p><p>的数据保持一致。MySQL主从复制是MySQL数据库自带功能，无需借助第三方工具。</p><br><br><p>MySQL复制过程分为三步：</p><ul><li>master将改变记录到二进制日志（<strong>binary log</strong>）</li><li>slave将master的binary log拷贝到他的中继日志（relay log）</li><li>slave重做中继日志中的事件，将改变应用到自己的数据库中</li></ul><br><br><br><p>配置两个服务器</p><p>192.168.xx.xx1 &#x2F;&#x2F;主库所在服务器<br>192.168.xx.xx2 &#x2F;&#x2F;从库所在服务器 .若从库是克隆的数据库需要重新配置uuid </p><p>主库配置：<br>1.修改mysql主库数据库的配置文件 &#x2F;etc&#x2F;my.cnf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin  //[必须] 启用二进制日志</span><br><span class="line">server-id=100    //[必须] 服务器唯一id</span><br></pre></td></tr></table></figure><p>2.重启主库mysql服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>3.进入到mysql ，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE ON *.* to &#x27;xiaoming&#x27;@&#x27;%&#x27; identified by &#x27;Root@123456&#x27;;</span><br></pre></td></tr></table></figure><p>4.登入Mysql数据库，执行,记录下结果的File和Position的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><p>从库配置：<br>1.修改Mysql从库数据库配置文件 &#x2F;etc&#x2F;my.cnf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=101   //[必须] 服务器唯一id</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;2.重启从库mysql服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;3.进入到Mysql  数据库执行  这里的File 和Position的值是从主库show master status;查询的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=&#x27;主库端口ip&#x27;,master_user=&#x27;xiaoming&#x27;,master_password=&#x27;Root@123456&#x27;,master_log_file=&#x27;File&#x27;,master_log_pos=Position;</span><br></pre></td></tr></table></figure><p>这里有报错的话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 3021 (HY000): This operation cannot be performed with a running slave io thread; run STOP SLAVE IO_THREAD FOR CHANNEL &#x27;&#x27; first.</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;再使用上方的导入命令</p><p>&#x2F;&#x2F;启动线程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;查看主从状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure><p>注意观察 都为yes则成功，若从库是克隆的数据库需要重新配置uuid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br><span class="line">注意：若Slave_IO_Running: Connection uuid已改情况下，查看是不是主库防火墙问题</span><br></pre></td></tr></table></figure><br><h2 id="2-读写分离"><a href="#2-读写分离" class="headerlink" title="2.读写分离"></a>2.读写分离</h2><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a><strong>背景：</strong></h3><p>面对日益增加的系统访问量，数据库的吞吐量面临着巨大瓶颈。对于同一时刻有大量并发读操作和较少写操作类型的</p><p>应用系统来说，将数据库拆分为<strong>主库</strong>和<strong>从库</strong>，主库负责处理事务性的增删改操作，从库负责处理查询操作，能够有效的避免由数据更新导</p><p>致的行锁，使得整个系统的查询性能得到极大的改善。</p><h3 id="Sharding-JDBC介绍："><a href="#Sharding-JDBC介绍：" class="headerlink" title="Sharding-JDBC介绍："></a><strong>Sharding-JDBC介绍：</strong></h3><p>Sharding-JDBC定位为轻量级Java框架，在Java的JDBC层提供的额外服务。它使用客户端直连数据库，以jar包形式提供服务，无需额外部</p><p>署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p><p>使用Sharding-JDBC可以在程序中轻松的实现数据库读写分离。</p><ul><li>适用于任何基于JDBC的ORM框架，如: JPA, Hibernate,Mybatis, Spring JDBC Template或直接使用JDBC。<ul><li>对象关系映射（Object Relational Mapping，简称ORM）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术</li></ul></li><li>支持任何第三方的数据库连接池，如:DBCP, C3P0,BoneCP, Druid, HikariCP等。</li><li>支持任意实现JDBC规范的数据库。目前支持MySQL,Oracle,SQLServer，PostgreSQL以及任何遵循SQL92标准的数据库。</li></ul><h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><p>1.导入Maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.O-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在配置文件中配置读写分离规则</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#主从配置</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="comment"># 主数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.23.133:3306/rj?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> </span><br><span class="line">        <span class="attr">password:</span> </span><br><span class="line">      <span class="comment"># 从数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.23.134:3306/rj?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> </span><br><span class="line">        <span class="attr">password:</span> </span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span> <span class="comment">#轮询</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 从库数据源名称列表，多个逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false</span></span><br></pre></td></tr></table></figure><p>3.在配置文件中配置<strong>允许bean定义覆盖</strong>配置顶</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java IO</title>
      <link href="/2022/10/01/IO%E6%B5%81%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/10/01/IO%E6%B5%81%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="IO流详解"><a href="#IO流详解" class="headerlink" title="IO流详解"></a>IO流详解</h1><h2 id="1-IO流类结构图"><a href="#1-IO流类结构图" class="headerlink" title="1.IO流类结构图"></a>1.IO流类结构图</h2><p><img src="https://img-blog.csdnimg.cn/20190503233300304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAxNDUyMTk=,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><table><thead><tr><th align="center">分类</th><th align="center">字节输入流</th><th align="center">字节输出流</th><th align="center">字符输入流</th><th align="center">字符输出流</th></tr></thead><tbody><tr><td align="center">抽象基类</td><td align="center">InputStream</td><td align="center">OutputStream</td><td align="center">Reader</td><td align="center">Writer</td></tr><tr><td align="center">访问文件</td><td align="center">FileInputStream</td><td align="center">FileOutputStream</td><td align="center">FileRead</td><td align="center">FileWriter</td></tr><tr><td align="center">访问数组</td><td align="center">ByteArrayInputStream</td><td align="center">ByteArrayOutputStream</td><td align="center">CharArrayReader</td><td align="center">CharArrayWriter</td></tr><tr><td align="center">访问管道</td><td align="center">PipedInputStream</td><td align="center">PipedOutputStream</td><td align="center">PipedReader</td><td align="center">PipedWriter</td></tr><tr><td align="center">访问字符串</td><td align="center">\</td><td align="center">\</td><td align="center">StringReader</td><td align="center">StringWriter</td></tr><tr><td align="center">缓存流</td><td align="center">BufferedInputStream</td><td align="center">BufferedOutputStream</td><td align="center">BufferedReader</td><td align="center">BufferedWriter</td></tr><tr><td align="center">转换流</td><td align="center">\</td><td align="center">\</td><td align="center">InputStreamReader</td><td align="center">OutputStreamWriter</td></tr><tr><td align="center">对象流</td><td align="center">ObjectInputStream</td><td align="center">ObjectOutputStream</td><td align="center">\</td><td align="center">\</td></tr><tr><td align="center">打印流</td><td align="center">\</td><td align="center">PrintStream</td><td align="center">\</td><td align="center">PrintWriter</td></tr><tr><td align="center">推回输入流</td><td align="center">PushbackInputStream</td><td align="center">\</td><td align="center">PushbackReader</td><td align="center">\</td></tr><tr><td align="center">特殊流</td><td align="center">DateInputStream</td><td align="center">DateOutputStream</td><td align="center">\</td><td align="center">\</td></tr></tbody></table><h3 id="常用的流"><a href="#常用的流" class="headerlink" title="常用的流"></a>常用的流</h3><p>​字节流字节流字符流字符流</p><p>​：<strong>FileInputStream</strong>   <strong>FileOutputStream</strong>  <strong>FileRead</strong>   <strong>FileWriter</strong>   </p><p>​<strong>BufferedInputStream</strong>  <strong>BufferedOutputStream</strong><strong>BufferedReader</strong>  <strong>BufferedWriter</strong>  </p><p>​<strong>InputStreamReader</strong>  <strong>OutputStreamWriter</strong></p><p>是<strong>常用的流</strong></p><h2 id="IO流的基类"><a href="#IO流的基类" class="headerlink" title="IO流的基类"></a>IO流的基类</h2><p> <strong>InputStream&#x2F;Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</strong></p><p> <strong>OutputStream&#x2F;Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</strong></p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意</strong>：</h3><p>InputStream&#x2F;OutputStream和Reader&#x2F;Writer都是抽象类，本身不能创建实例</p><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><p><strong>InputStream&#x2F;</strong> <strong>Reader</strong>里面包含如下3个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">()</span>/<span class="type">int</span> <span class="title function_">read</span><span class="params">()</span><span class="comment">//,从输入流中读取单个字节/字符，返回所读取的字节/字符数据(字节/字符数据可直接转换为int类型)</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b)</span>/<span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span>[] b)</span><span class="comment">//,从输入流中最多读取b.length个字节/字符的数据，并存储到字符/字节数组b中，返回实际读取的字节/字符数</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b,<span class="type">int</span> off,<span class="type">int</span> len)</span>/<span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span>[] b,<span class="type">int</span> off,<span class="type">int</span> len)</span><span class="comment">//， 从输入流中最多读取len个字节/字符的数据，并将其存储在数组b中，放入数组b中时，并不是从数组起点开始，而是从off位置开始，返回实际读取的字节/字符数。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当取到最后方法将回返回-1</p><p><strong>OutputStream</strong>和<strong>Writer</strong>： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> c)</span>; <span class="comment">//将指定的字节/字符输出到输出流中，其中c即可以代表字节，也可以代表字符。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[]/<span class="type">char</span>[] buf)</span>;<span class="comment">// 将字节数组/字符数组中的数据输出到指定输出流中。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[]/<span class="type">char</span>[] buf, <span class="type">int</span> off,<span class="type">int</span> len )</span>; <span class="comment">//将字节数组/字符数组中从off位置开始，长度为len的字节/字符输出到输出流中。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//其中Writer中还包含</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String str)</span>; <span class="comment">//将str字符串里包含的字符输出到指定输出流中。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span> <span class="params">(String str, <span class="type">int</span> off, <span class="type">int</span> len)</span>; <span class="comment">//将str字符串里面从off位置开始，长度为len的字符输出到指定输出流中</span></span><br></pre></td></tr></table></figure><h2 id="文件流（FileInputStream-x2F-FileReader-FileOutputStream-x2F-FileWriter）"><a href="#文件流（FileInputStream-x2F-FileReader-FileOutputStream-x2F-FileWriter）" class="headerlink" title="文件流（FileInputStream&#x2F;FileReader,FileOutputStream&#x2F;FileWriter）"></a>文件流（FileInputStream&#x2F;FileReader,FileOutputStream&#x2F;FileWriter）</h2><p>前面说过InoutStream&#x2F;OutputStream和Reader&#x2F;Writer都是抽象类，本身不能创建实例，但是他们分别有一个作用于读取文件的输入流</p><p>FileInputStream和FileReader,他们都是节点流   会直接和文件关联，</p><h3 id="字节流（FileInputStream、FileOutputStream）操作演示"><a href="#字节流（FileInputStream、FileOutputStream）操作演示" class="headerlink" title="字节流（FileInputStream、FileOutputStream）操作演示"></a>字节流（FileInputStream、FileOutputStream）操作演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该类用来演示FileInputStream、FileOutputStream的操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">File_Stream</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java\\Javawork\\Java\\com.zhang.Questions_after_class\\src\\com\\itymsd\\i\\IoStudy\\fileStream_\\File_learn.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path2</span> <span class="operator">=</span> <span class="string">&quot;D:\\Java\\Javawork\\Java\\com.zhang.Questions_after_class\\src\\com\\itymsd\\i\\IoStudy\\fileStream_\\File_learn2.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">            <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件&quot;</span>+file.getName()+<span class="string">&quot;不存在正在创建...&quot;</span>);</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">newFile</span> <span class="operator">=</span> file.createNewFile();</span><br><span class="line">                <span class="keyword">if</span> (newFile)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;文件创建失败！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path2);</span><br><span class="line">            <span class="keyword">if</span> (!file2.exists())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件&quot;</span>+file2.getName()+<span class="string">&quot;不存在正在创建...&quot;</span>);</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">newFile</span> <span class="operator">=</span> file.createNewFile();</span><br><span class="line">                <span class="keyword">if</span> (!newFile)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;文件创建失败！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建字节输入流</span></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="comment">//创建字节输出流</span></span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">//记录读取的数量，当等于-1时说明内容读取完毕，可以停止循环了</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">hasRead</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//从开始读取十个字节</span></span><br><span class="line">            <span class="keyword">while</span> ((hasRead = fis.read(bytes,<span class="number">0</span>,<span class="number">10</span>))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hasRead=&quot;</span> +hasRead+<span class="string">&quot;,&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(bytes));<span class="comment">//bytes.toString</span></span><br><span class="line">                fos.write(bytes,<span class="number">0</span>,hasRead);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件写入成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            fis.close();</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字符流（FileReader、FileWriter）操作演示"><a href="#字符流（FileReader、FileWriter）操作演示" class="headerlink" title="字符流（FileReader、FileWriter）操作演示"></a>字符流（FileReader、FileWriter）操作演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该类演示FileReader和FileWriter的操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">File_Read_Writer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Reader</span> <span class="variable">file_in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Writer</span> <span class="variable">file_out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src\\com\\itymsd\\i\\IoStudy\\fileRW\\File_R.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src\\com\\itymsd\\i\\IoStudy\\fileRW\\File_W.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!file.exists())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(file.getName()+<span class="string">&quot;不存在正在创建&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!file.createNewFile()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;创建失败！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!file1.exists())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(file1.getName()+<span class="string">&quot;不存在正在创建&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!file1.createNewFile()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;创建失败！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取目标文件创建对象</span></span><br><span class="line">        file_in = <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">        <span class="comment">//写入目标文件创建对象</span></span><br><span class="line">        file_out = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建存储字符数组</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">hasread</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取目标文件</span></span><br><span class="line">        <span class="keyword">while</span> ((hasread = file_in.read(chars,<span class="number">0</span>,<span class="number">10</span>))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hasread=&quot;</span>+hasread+<span class="string">&quot;,&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(chars));</span><br><span class="line">            <span class="comment">//写入操作</span></span><br><span class="line">            file_out.write(chars,<span class="number">0</span>,hasread);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        file_out.close();</span><br><span class="line">        file_in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="缓存流（BufferedInputStream-x2F-BufferedOutputStream-BufferedReader-x2F-BufferedWriter）"><a href="#缓存流（BufferedInputStream-x2F-BufferedOutputStream-BufferedReader-x2F-BufferedWriter）" class="headerlink" title="缓存流（BufferedInputStream&#x2F;BufferedOutputStream,BufferedReader&#x2F;BufferedWriter）"></a>缓存流（BufferedInputStream&#x2F;BufferedOutputStream,BufferedReader&#x2F;BufferedWriter）</h2><p>缓冲流是处理流的一种，它依赖于原始的输入输出流, 它令输入输出流具有1个缓冲区, 显著减少与外部设备的IO次数, 而且提供一些额外的方法。而我们使用缓冲流无非两个目的:</p><p>   <strong>1.减少IO次数(提升performance)</strong></p><p>   <strong>2. 使用一些缓冲流的额外的方法</strong></p><h3 id="字节流缓存流"><a href="#字节流缓存流" class="headerlink" title="字节流缓存流"></a>字节流缓存流</h3><p><strong>（BufferedInputStream&#x2F;BufferedOutputStream</strong>）操作演示</p><p> 如下代码拷贝一个<strong>25M</strong>的文本文件out.txt：</p><p>​    1、使用原始文件流<strong>FileInputStream&#x2F;FileOutputStream</strong>的read()，wrire(int x)方法拷贝时长为：<strong>450s</strong>； </p><p>​    2、将原始文件流封装成缓冲流<strong>BufferedInputStream&#x2F;BufferedOutputStream</strong>拷贝时长变为 ：<strong>3s</strong></p><p>​    <strong>3、</strong>使用原始文件流<strong>FileInputStream&#x2F;FileOutputStream</strong>的<strong>read(byte[] b)<strong>，wrire(<strong>byte[] b</strong>)方法拷贝时长为：</strong>1s，</strong>  <strong>貌似比缓冲流效果还好，切其实原理是一致的一次读取多个字节</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> *</span><br><span class="line"> * 该类是对BufferedInputStream和BufferedOutputStream字节缓存流的操作演示</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Buffered_Stream</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> FileInputStream fileIn=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> FileOutputStream fileOut=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">gBufferedSize</span> <span class="operator">=</span> <span class="number">512</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;src\\com\\itymsd\\i\\IoStudy\\bufferStream_\\Buffered_I.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">index</span> <span class="operator">=</span> <span class="string">&quot;src\\com\\itymsd\\i\\IoStudy\\bufferStream_\\Buffered_O.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">            <span class="keyword">if</span>(!file.exists())</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;file is not exist&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (file.createNewFile()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;创建文件成功&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;创建失败！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(index);</span><br><span class="line">            <span class="keyword">if</span>(!file2.exists())</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(file.getName()+<span class="string">&quot;不存在&quot;</span>+<span class="string">&quot;正在创建文件&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (file2.createNewFile()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;创建文件成功&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;创建失败！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//创建字节输出输入流，缓冲流字节输入输出流</span></span><br><span class="line">            fileIn = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fileIn,gBufferedSize);</span><br><span class="line"></span><br><span class="line">            fileOut = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file2);</span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fileOut,gBufferedSize);</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[gBufferedSize];</span><br><span class="line">            <span class="type">int</span> <span class="variable">hasRead</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//字节流存入操作</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(startTime);</span><br><span class="line">            <span class="keyword">while</span> ((hasRead = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(bytes);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(endTime);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            fileOut.close();</span><br><span class="line">            fileIn.close();</span><br><span class="line">            bos.close();</span><br><span class="line">            bis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符缓存流"><a href="#字符缓存流" class="headerlink" title="字符缓存流"></a><strong>字符缓存流</strong></h3><p><strong>相比于原始字符流Reader&#x2F;Writer新增了文本行的读写方式，</strong></p><p>具体方法：</p><p><strong>readLine():读取单行文本不包括换行符’\n’；</strong></p><p><strong>newLine():向文件中写入一个换行符</strong></p><p><strong>BufferedReader、BufferedWriter操作演示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> *该类是BufferedReader和BufferedWriter的操作演示</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Buffer_Read_Writer</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> <span class="type">Reader</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> <span class="type">Writer</span> <span class="variable">fileOut</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> <span class="type">BufferedReader</span> <span class="variable">bufferFileIn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> <span class="type">BufferedWriter</span> <span class="variable">bufferFileOut</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;src\\com\\itymsd\\i\\IoStudy\\bufferRW\\Buffer_R.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">index</span> <span class="operator">=</span> <span class="string">&quot;src\\com\\itymsd\\i\\IoStudy\\bufferRW\\Buffer_W.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!file.exists())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(file.getName()+<span class="string">&quot;未找到，正在创建...&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (file.createNewFile()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!file1.exists())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(file1.getName()+<span class="string">&quot;未找到，正在创建...&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (file1.createNewFile()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileIn = <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">            fileOut = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            bufferFileOut = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fileOut);</span><br><span class="line">            bufferFileIn = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fileIn);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">readLine</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((readLine = bufferFileIn.readLine()) != <span class="literal">null</span> )&#123;</span><br><span class="line">                System.out.println(readLine);</span><br><span class="line">                bufferFileOut.write(readLine);</span><br><span class="line">                bufferFileOut.newLine();<span class="comment">//写入换行符</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//刷新流</span></span><br><span class="line">            bufferFileOut.flush();</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bufferFileOut.close();</span><br><span class="line">                bufferFileIn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p><strong>1.InputStreamReader:字节到字符的桥梁</strong></p><p><strong>2.OutputStreamWriter:字符到字节的桥梁</strong></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>这两个流对象是字符体系中的成员，它们有转换作用，本身又是字符流，所以在构造的时候需要传入字节流对象进来。</strong></p><p>字节转换到字符的转换操作演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *字符流转换字节流的操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IoStream_to_ReadWriter</span> &#123;</span><br><span class="line">    <span class="comment">//字节流</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">InputStream</span> <span class="variable">ist</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">OutputStream</span> <span class="variable">ost</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符流</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Reader</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Writer</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用字节流接收</span></span><br><span class="line">         ist = System.in;</span><br><span class="line">        ost = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;src\\com\\itymsd\\i\\IoStudy\\ioStreamRW\\IoStream_to_RW.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将字节流接收的使用转换为字符流</span></span><br><span class="line">        is = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(ist);</span><br><span class="line">        os = <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(ost);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;亲输入字符串&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> is.read(chars);</span><br><span class="line">        System.out.println(<span class="string">&quot;read=&quot;</span> + read + <span class="string">&quot;,&quot;</span>+ <span class="keyword">new</span> <span class="title class_">String</span>(chars));</span><br><span class="line">        os.write(chars,<span class="number">0</span>,read);</span><br><span class="line"></span><br><span class="line">        is.close();</span><br><span class="line">        os.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-properties配置文件"><a href="#2-properties配置文件" class="headerlink" title="2.properties配置文件"></a>2.properties配置文件</h2><h3 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h3><p>properties是HashMap的直接子类</p><p>HashMap的许多方法也都有</p><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//存入键值</span></span><br><span class="line">properties.setProperty(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过key查找</span></span><br><span class="line">properties.get(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以像HashMap一样使用entrySet()方法去遍历出来</span></span><br><span class="line"><span class="comment">//将key值存入Set中</span></span><br><span class="line"><span class="type">Set</span> <span class="variable">entries</span> <span class="operator">=</span> properties.entrySet();</span><br><span class="line">System.out.println(<span class="string">&quot;entrySet+迭代器遍历&quot;</span>);</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> entries.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    <span class="comment">//将迭代器中的转化为 Entry类型  这样就可以直接取出里面的键值</span></span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) iterator.next();</span><br><span class="line">    System.out.print(entry.getValue());</span><br><span class="line">    System.out.println(entry.getKey());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//list()方法  通过传入PrintStream或PrintWriter类型及其子类来像其中的路径文件写入配置信息</span></span><br><span class="line"> <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        properties.setProperty(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;222&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;333&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;ddd&quot;</span>,<span class="string">&quot;444&quot;</span>);</span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">printStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            printStream = <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;src\\com\\itymsd\\day20\\properties\\hello.txt&quot;</span>);</span><br><span class="line">            printWriter = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;src\\com\\itymsd\\day20\\properties\\hello2.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//list是存入方法  load是读取方法</span></span><br><span class="line">            properties.list(printStream);</span><br><span class="line">            properties.list(printWriter);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            printStream.close();</span><br><span class="line">            printWriter.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;写入完成&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//load()方法  从Reader或InputStream及其子类中指定路径文件读取配置信息存放到自己的对象中</span></span><br><span class="line"><span class="comment">//例如    但是这样会有中文的乱码问题</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;src\\com\\itymsd\\day20\\properties\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream= <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path);</span><br><span class="line">            properties.load(fileInputStream);</span><br><span class="line">            System.out.println(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所以我们通过将fileInputStream传入InputStreamReader类后指定转码类型  UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fileInputStream,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//再将inputStreamReader传入properties中</span></span><br><span class="line">properties.load(inputStreamReader);</span><br><span class="line"><span class="comment">//此时properties中已经存储好了从里面传来的配置</span></span><br><span class="line">System.out.println(properties)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-File"><a href="#2-File" class="headerlink" title="2.File"></a>2.File</h2><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法一</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;src\\com\\itymsd\\day21\\iOStream\\file&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path+<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd_HH&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> simpleDateFormat.format(date);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> path;</span><br><span class="line">        <span class="type">String</span> <span class="variable">chile</span> <span class="operator">=</span> format+<span class="string">&quot;log.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//构造方法二</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent,chile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造三</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src\\com\\itymsd\\day21\\iOStream\\file&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file2,chile);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!file3.exists())&#123;</span><br><span class="line">            file3.mkdir();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//boolean createNewFile()   创建新的文件  注意:只能创建文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;src\\com\\itymsd\\day21\\iOStream\\file\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        file.createNewFile();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// boolean delete()  删除文件夹  注意:如果删除文件夹,要保证文件夹是个空的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// boolean exists()  判断文件或者文件夹是否存在</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> file.exists();</span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否存在？&quot;</span>+exists);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// File getAbsoluteFile()   返回路径地址  绝对路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">absoluteFile</span> <span class="operator">=</span> file.getAbsoluteFile();</span><br><span class="line">        System.out.println(absoluteFile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String getAbsolutePath()  返回路径地址  绝对路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">absolutePath</span> <span class="operator">=</span> file.getAbsolutePath();</span><br><span class="line">        System.out.println(absolutePath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String getName() 获得文件或者文件夹名字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> file.getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名字为：&quot;</span>+name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// String getParent()  返回父路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> file.getParent();</span><br><span class="line">        System.out.println(<span class="string">&quot;父路径为：&quot;</span>+parent);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//File getParentFile()  返回父路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">parentFile</span> <span class="operator">=</span> file.getParentFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;以file类型返回父路径：&quot;</span>+parentFile);</span><br><span class="line">        <span class="comment">// String getPath()  返回路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path1</span> <span class="operator">=</span> file.getPath();</span><br><span class="line">        System.out.println(<span class="string">&quot;返回路径：&quot;</span>+path1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// boolean isDirectory()  判断是否为文件夹</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">directory</span> <span class="operator">=</span> file.isDirectory();</span><br><span class="line">        System.out.println(<span class="string">&quot;是否为文件夹？&quot;</span>+directory);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// boolean isFile()  判断是否为文件</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">file1</span> <span class="operator">=</span> file.isFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;是否是文件？&quot;</span>+file1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// boolean isHidden() 判断是否为隐藏文件</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hidden</span> <span class="operator">=</span> file.isHidden();</span><br><span class="line">        System.out.println(<span class="string">&quot;是否是隐藏文件：&quot;</span>+hidden);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// boolean mkdir()创建单个文件夹</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean mkdirs() 创建多个文件夹</span></span><br></pre></td></tr></table></figure><p>与列表相关的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// static File[] listRoots() 列出可用的文件系统根</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;src\\com\\itymsd\\day21\\iOStream\\file&quot;</span>;</span><br><span class="line">       <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">       File[] files = file.listRoots();</span><br><span class="line">       System.out.println(Arrays.toString(files));</span><br><span class="line">       <span class="comment">// String[] list() 返回一个字符串数组，命名由此抽象路径名表示的目录中的文件和目录。</span></span><br><span class="line">       System.out.println(<span class="string">&quot;----------------------------------------------&quot;</span>);</span><br><span class="line">       String[] list = file.list();</span><br><span class="line">       System.out.println(Arrays.toString(list));</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;-----------------------------------------------&quot;</span>);</span><br><span class="line">       <span class="comment">// File[] listFiles() 返回一个抽象路径名数组，表示由该抽象路径名表示的目录中的文件。</span></span><br><span class="line">       File[] files1 = file.listFiles();</span><br><span class="line">       System.out.println(Arrays.toString(files1));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">// String[] list(FilenameFilter filter) 返回一个字符串数组，命名由此抽象路径名表示的目录中满足指定过滤器的文件和目录。</span></span><br><span class="line">       System.out.println(<span class="string">&quot;---------------------------------------------------&quot;</span>);</span><br><span class="line">       String[] list1 = file.list(<span class="keyword">new</span> <span class="title class_">FilenameFilter</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File dir, String name)</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (name.endsWith(<span class="string">&quot;.java&quot;</span>))&#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       System.out.println(Arrays.toString(list1));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">       <span class="comment">// File[] listFiles(FileFilter filter) 返回一个抽象路径名数组，表示由此抽象路径名表示的满足指定过滤器的目录中的文件和目录。</span></span><br><span class="line">       File[] files2 = file.listFiles(<span class="keyword">new</span> <span class="title class_">FileFilter</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File pathname)</span> &#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       System.out.println(Arrays.toString(files2));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;---------------------------------&quot;</span>);</span><br><span class="line">       <span class="comment">// File[] listFiles(FilenameFilter filter) 返回一个抽象路径名数组，表示由此抽象路径名表示的满足指定过滤器的目录中的文件和目录。</span></span><br><span class="line">       File[] files3 = file.listFiles(<span class="keyword">new</span> <span class="title class_">FilenameFilter</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File dir, String name)</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       System.out.println(Arrays.toString(files3));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOStream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计时器使用API</title>
      <link href="/2022/10/01/%E8%AE%A1%E6%97%B6%E5%99%A8%E4%BD%BF%E7%94%A8API/"/>
      <url>/2022/10/01/%E8%AE%A1%E6%97%B6%E5%99%A8%E4%BD%BF%E7%94%A8API/</url>
      
        <content type="html"><![CDATA[<h1 id="计时器使用API"><a href="#计时器使用API" class="headerlink" title="计时器使用API"></a>计时器使用API</h1><h2 id="高频使用方法"><a href="#高频使用方法" class="headerlink" title="高频使用方法"></a>高频使用方法</h2><p>具体看 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Java\Javawork\Java\com.zhang.Questions_after_class\src\com\sys\threaduse\Timepiece02.java</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在一个具体时间时运行</span></span><br><span class="line">schedule(TimerTask timerTask,Date date); </span><br><span class="line"><span class="comment">//在运行后多久运行</span></span><br><span class="line">schedule(TimerTask timerTask,<span class="type">long</span> <span class="type">long</span>);</span><br><span class="line"><span class="comment">//在给定时间后对指定任务做重复执行</span></span><br><span class="line">schedule(TimerTask timerTask,Date firstTime,<span class="type">long</span> <span class="type">long</span>);</span><br><span class="line"><span class="comment">//在给定时间开始 该方法会对任务进行固定速率执行，将前面的未执行的一次执行，到目前时间为止</span></span><br><span class="line">scheduleAtFixedRate(TimerTask timerTask,Date firstTime,<span class="type">long</span> <span class="type">long</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hi,Spring!</title>
      <link href="/2022/09/30/hi,Spring!/"/>
      <url>/2022/09/30/hi,Spring!/</url>
      
        <content type="html"><![CDATA[<p><em>Spring框架是一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81/114160?fromModule=lemma_inlink">开放源代码</a>的<a href="https://baike.baidu.com/item/J2EE/110838?fromModule=lemma_inlink">J2EE</a>应用程序框架，</em></p><p><em>由[Rod Johnson](<a href="https://baike.baidu.com/item/Rod">https://baike.baidu.com/item/Rod</a> Johnson&#x2F;1423612?fromModule&#x3D;lemma_inlink)发起，是针对bean的生命周期进行管理的轻量级容器（lightweight container）。 Spring解决了开发者在J2EE开发中遇到的许多常见的问题，提供了功能强大IOC、<a href="https://baike.baidu.com/item/AOP/1332219?fromModule=lemma_inlink">AOP</a>及Web MVC等功能。Spring可以单独应用于构筑应用程序，也可以和Struts、Webwork、Tapestry等众多Web框架组合使用，并且可以与 Swing等<a href="https://baike.baidu.com/item/%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/2331979?fromModule=lemma_inlink">桌面应用程序</a>AP组合。因此， Spring不仅仅能应用于J2EE应用程序之中，也可以应用于桌面应用程序以及小应用程序之中。Spring框架主要由七部分组成，分别是 Spring Core、 Spring AOP、 Spring ORM、 Spring DAO、Spring Context、 Spring Web和 Spring Web MVC。</em></p><h2 id="什么是bean"><a href="#什么是bean" class="headerlink" title="什么是bean?"></a>什么是bean?</h2><ul><li>Bean是被实例的、组装的、及被Spring容器管理的<strong>Java对象</strong>。</li><li>Spring容器会自动完成Bean对象的实例化。</li><li>创建应用对象之间的协作关系的行为被称为：装配，这就是依赖注入的本质</li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="bean实例化方法"><a href="#bean实例化方法" class="headerlink" title="bean实例化方法"></a>bean实例化方法</h2><p>方式一、构造方法实例化bean</p><p>方式二、使用静态工厂实例化bean</p><p>方式三、使用实例工厂实例化bean</p><p>方式四、使用FactoryBean实例化bean</p><h2 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h2><h2 id="spring注解"><a href="#spring注解" class="headerlink" title="spring注解"></a>spring注解</h2><h3 id="Bean："><a href="#Bean：" class="headerlink" title="@Bean："></a><strong>@Bean</strong>：</h3><p>在方法上添加@Bean，表示当前方法的返回值是一个bean，形参会根据类型自动装配</p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration:"></a><strong>@Configuration</strong>:</h3><p>表明当前类为一个配置类,底层注解使用了@Component, 所有该注解和@Component 有一样的功能</p><h3 id="Component"><a href="#Component" class="headerlink" title="@Component:"></a>@Component:</h3><p>表明当前类为一个配置类</p><h3 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect:"></a><strong>@Aspect:</strong></h3><p>作用是把当前类标识为一个切面供容器读取</p><p>​<strong>@Pointcut(“execution(*)”):</strong></p><p>​切入点，决定从何处切入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>​<strong>@Before</strong>在该点之前做某些方法操作</p><p>​<strong>@After：</strong>在绑定的切入点后做某些方法操作</p><p>​参数：<strong>JoinPoint</strong>：用于描述切入点的对象，必须配置成通知方法中的第一个参数，可用于获取原始方法调用的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//JoinPoint：用于描述切入点的对象，必须配置成通知方法中的第一个参数，可用于获取原始方法调用的参数</span></span><br><span class="line"><span class="comment">//    @Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint jp)</span> &#123;</span><br><span class="line">        Object[] args = jp.getArgs();</span><br><span class="line">        System.out.println(Arrays.toString(args));</span><br><span class="line">        System.out.println(<span class="string">&quot;before advice ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @After(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint jp)</span> &#123;</span><br><span class="line">        Object[] args = jp.getArgs();</span><br><span class="line">        System.out.println(Arrays.toString(args));</span><br><span class="line">        System.out.println(<span class="string">&quot;after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>**@Around(“pt()”)**：环绕通知  </p><p>​参数：<strong>ProceedingJoinPoint：</strong>专用于环绕通知，是JoinPoint子类，可以实现对原始方法的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> &#123;</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        System.out.println(Arrays.toString(args));</span><br><span class="line">        args[<span class="number">0</span>] = <span class="number">666</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ret = pjp.proceed(args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​<strong>@AfterReturning(value &#x3D; “pt()”,returning &#x3D; “ret”)：</strong>设置返回后通知获取原始方法的返回值，要求returning属性值必须与方法形参名相同</p><p>​<strong>@AfterThrowing(value &#x3D; “pt()”,throwing &#x3D; “t”)：</strong>设置抛出异常后通知获取原始方法运行时抛出的异常对象，要求throwing属性值必须与方法形参名相同</p><h2 id="spring的事务"><a href="#spring的事务" class="headerlink" title="spring的事务"></a>spring的事务</h2><h4 id="spring开启事务步骤"><a href="#spring开启事务步骤" class="headerlink" title="spring开启事务步骤"></a>spring开启事务步骤</h4><ol><li><p>spring开启事务需要在spring的配置类中添加注解**@EnableTransactionMangement**</p></li><li><p>可以在数据源配置类(JdbcConfig)中配置事务管理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">      <span class="type">DataSourceTransactionManager</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">      ds.setDataSource(dataSource);</span><br><span class="line">      <span class="keyword">return</span> ds;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>在服务层接口挂上事务管理器的注解</p></li></ol><h4 id="Spring事务的传播行为"><a href="#Spring事务的传播行为" class="headerlink" title="Spring事务的传播行为"></a>Spring事务的传播行为</h4><p>spring的7种传播行为：<br>1.required：(默认传播行为)，如果当前有事务，其他就用当前事务，不会新增事务。<br>例如：方法A调用方法B，它们用同一个事务。(如果B没有事务，它们会用同一个事务。)(只要有一个回滚，整体就会回滚)</p><p>2.requires_new：如果当前有事务，其他不会加入当前事务，会新增事务。即他们的事务没有关系，不是同一个事务。<br>如果其他没有事务，那么以当前事务运行。<br>例如：方法A调用方法B，它们用不同的事务。(B不会用A的事务，会新增事务。)</p><p>3.supports:当前没有事务，就以非事务运行。当前有事务呢？就以当前事务运行。<br>例如：方法A调用方法B，如果A没有事务，那么B就以非事务运行。<br>如果A有事务就以A事务为准。如果A没有事务，那么B就会以非事务执行。</p><p>4.mandatory:其他没有事务就会抛异常。当前没有事务抛出异常，当前有事务则支持当前事务。<br>支持当前事务，如果当前没有事务就会抛出异常。<br>例如：方法A调用方法B，如果方法A没有事务，那么就会抛出异常。</p><p>5.not_supported：以非事务执行。</p><p>例如：方法A调用方法B，方法B会挂起事务A以非事务方式执行。</p><p>6.never:以非事务执行，如果存在事务，抛出异常。<br>总是以非事务执行，如果存在事务，那么就抛出异常。</p><p>7.nested:如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。<br>如果当前事务不存在，那么其行为与Required一样。<br>例如：方法A中调用了方法B，B中try catch手动回滚，A不会回滚。</p><h2 id="springMVC"><a href="#springMVC" class="headerlink" title="springMVC"></a>springMVC</h2><h3 id="1启动服务器初始化过程"><a href="#1启动服务器初始化过程" class="headerlink" title="1启动服务器初始化过程"></a>1启动服务器初始化过程</h3><ol><li><p>服务器启动，执行ServletContainersInitCofig类，初始化web容器</p></li><li><p>执行createServletApplicationContext方法，创建了WebApplicationContext对象</p></li><li><p>加载SpringMvcConfig  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//web容器配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//加载springmvc配置类，产生springmvc容器（本质还是spring容器）</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化WebApplicationContext对象</span></span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        <span class="comment">//加载指定配置类</span></span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置由springmvc控制器处理的请求映射路径</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载spring配置类</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>执行@ComponentScan加载对应的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//springmvc配置类，本质上还是一个spring配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>加载Controller，每个@RequestMapping的对应名称对应一个具体方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置映射路径为/save，即外部访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="comment">//设置当前操作返回结果为指定json数据（本质上是一个字符串信息）</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置映射路径为/delete，即外部访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>执行getServletMapping方法，定义所有的请求都通过SpringMVC</p></li></ol><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><p>普通参数：相同时，会自动绑定形参  ，请求参数名和形参名不同时，使用注解 @RequestParm(“参数名”)  形参 来进行绑定</p><p>POJO参数：如果请求参数名和实体类的字段名相同会自动绑定注入</p><p>POJO嵌套POJO参数：嵌套的POJO需要 xxx.参数名注入</p><p>数组参数：前端传递多个参数名相同的参数，框架会自动包装到数组接收</p><p>集合参数：可以使用@RequestParm绑定集合</p><h3 id="请求参数（传递JSON数据）"><a href="#请求参数（传递JSON数据）" class="headerlink" title="请求参数（传递JSON数据）"></a>请求参数（传递JSON数据）</h3><p>pom依赖加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>springMVC配置类中加入注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//开启json数据类型自动转换</span><br><span class="line">@EnableWebMvc</span><br></pre></td></tr></table></figure><p><strong>参数接收</strong>：</p><p>形参为集合List&lt;&gt;：在接收参数前使用@RequestBody绑定形参</p><p>形参为POJO：在接收参数前使用@RequestBody绑定形参</p><p>形参为List<POJO>:在接收参数前使用@RequestBody绑定形参</p><h3 id="日期类型参数传递"><a href="#日期类型参数传递" class="headerlink" title="日期类型参数传递"></a>日期类型参数传递</h3><p>当前端传输的日期参数符合格式  xxxx&#x2F;xx&#x2F;xx时，形参直接使用Date接收</p><p>不符合该形式时，使用@DateTimeFomat(pattern&#x3D;”yyyy-MM-dd HH:mm:ss”) Date date指定格式接收</p><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p><strong>响应跳转页面</strong>：直接可以返回资源路径+名称</p><p><strong>响应文本数据</strong>：返回值为String类型，设置返回值为任意字符串信息，即可实现返回指定字符串信息，需要依赖**@ResponseBody**注解</p><p><strong>响应POJO对象</strong>：返回值为实体类对象，设置返回值为实体类类型，即可实现返回对应对象的json数据，需要依赖**@ResponseBody<strong>注解和</strong>@EnableWebMvc**注解  ，</p><p><strong>响应POJO集合 ：</strong>返回值为某实体类的集合，设置返回值为某实体类的集合，即可实现返回对象的json数据，需要依赖**@ResponseBody<strong>注解和</strong>@EnableWebMvc**注解  </p><ol start="0"><li></li></ol><h2 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h2><p>REST:Representational State Transfer(表现形式状态转换)，使用该风格对资源访问叫restful</p><p>常用的四种</p><ul><li>GET （常用于查询）</li><li>POST（常用于保存）</li><li>PUT（常用于更新修改）</li><li>DELETE（常用于删除）</li></ul><p>若请求中有参数 可使用”&#x2F;{参数名}”   形参使用 <strong>@PathVariable</strong>注解绑定接收，这里参数名要相同</p><h2 id="返回前端数据的封装Result"><a href="#返回前端数据的封装Result" class="headerlink" title="返回前端数据的封装Result"></a>返回前端数据的封装Result</h2><p>固定三种数据</p><ol><li>返回的数据 data  Objcet data</li><li>返回的状态码 code  Integer code</li><li>返回信息 msg String msg</li></ol><p>视情况而定构造方法</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>出现异常现象的常见位置与常见诱因如下:</p><ol><li>框架内部抛出的异常:因使用不合规导致</li><li>数据层抛出的异常:因外部服务器故障导致（例如:服务器访问超时)</li><li>业务层抛出的异常:因业务逻辑书写错误导致（例如:遍历业务书写操作，导致索引异常等)</li><li>表现层抛出的异常:因数据收集、校验等规则导致（例如:不匹配的数据类型间导致异常)</li><li>工具类抛出的异常:因工具类书写不严谨不够健壮导致（例如:必要释放的连接长期未释放等)</li></ol><p>设置全局异常处理类时需要加上**@RestControllerAdvice**拦截Controller层的所有异常</p><p>通过@ExceptionHandler(异常.class)在方法上，通过改方法对异常进行一系列处理后，再向前端返回指定类型结果集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(SystemException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doSystemException</span><span class="params">(SystemException ex)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">//发送消息给运维</span></span><br><span class="line">        <span class="comment">//发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(ex.getCode(),<span class="literal">null</span>,ex.getMessage());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="项目异常分类"><a href="#项目异常分类" class="headerlink" title="项目异常分类"></a>项目异常分类</h3><ul><li>业务异常   (BusinessException)<ul><li>规范的用户行为产生的异常</li><li>不规范的用户行为操作产生的异常</li></ul></li><li>系统异常(SystemException)<ul><li>项目运行过程中可以预计且无法避免的异常</li></ul></li><li>其他异常（Exception）<ul><li>编程人员没有想到的异常</li></ul></li></ul><h2 id="MVC拦截器"><a href="#MVC拦截器" class="headerlink" title="MVC拦截器"></a>MVC拦截器</h2><p>先配置一个拦截器类</p><p>该类需要实现HandlerInterceptor，非springboot框架需要加上**@Compoent**注解</p><p><strong>HandlerInterceptor</strong>中有三个默认方法</p><p>preHandle：在调用所有处理请求的方法之前被自动调用执行的方法</p><p>postHandle：在ModelAndView对象返回之后被调用的方法</p><p>afterCompletion：在整个请求所有关联资源被执行完毕后所执行的方法</p><p>根据需求实现需要的方法</p><p>再创建一个配置类，该类需要实现<strong>WebMvcConfigurer</strong>接口，并加上**@Configuration**注解</p><p>实现<strong>addInterceptors</strong>：这个方法用于添加拦截器到springmvc中，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//加载当前的拦截器并进行注册</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginiterceptorConfigurer</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginInterceptor loginInterceptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line"><span class="comment">//        HandlerInterceptor loginInterceptor = new LoginInterceptor();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置白名单:存放在List集合中</span></span><br><span class="line">        List&lt;String&gt; patterns = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        patterns.add(<span class="string">&quot;/bootstrap3/**&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/css/**&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/images/**&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/web/register.html&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/web/login.html&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/web/index.html&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/web/product.html&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/users/reg&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/users/login&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/districts/**&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/products/**&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        registry.addInterceptor(loginInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)<span class="comment">//要拦截的url是什么 /**代表所有请求被拦截</span></span><br><span class="line">                .excludePathPatterns(patterns);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 开发软件安装</title>
      <link href="/2020/10/14/Linux%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>/2020/10/14/Linux%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux开发软件安装"><a href="#Linux开发软件安装" class="headerlink" title="Linux开发软件安装"></a>Linux开发软件安装</h1><p>[TOC]</p><h2 id="软件安装方式了解"><a href="#软件安装方式了解" class="headerlink" title="软件安装方式了解"></a>软件安装方式了解</h2><ul><li>二进制发表包安装<ul><li>软件已经针对具体平台编译打包发布，只需要解压，修改配置即可</li></ul></li><li>rpm安装<ul><li>软件已经按照redhat的包管理规范进行打包，使用rpm命令进行安装，不能自行解决库依赖问题</li></ul></li><li>yum安装<ul><li>一种在线软件安装方式，本质上还是rpm安装，自动下载安装包并安装，安装过程中自动解决库依赖问题</li></ul></li><li>源码编译安装<ul><li>软件以源码工程形式发布，需要自己编译打包</li></ul></li></ul><h2 id="一、JKD的安装（Centos7）"><a href="#一、JKD的安装（Centos7）" class="headerlink" title="一、JKD的安装（Centos7）"></a>一、JKD的安装（Centos7）</h2><p>这里使用yum方式安装JDK1.8版本</p><p>1.1查看是否已经安装JDK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>若提示“ -bash: java: 未找到命令” 则虚拟机没有安装JDK，保险起见依次执行下列代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//查看系统是否自带 jdk</span><br><span class="line">rpm -qa |grep java</span><br><span class="line">rpm -qa |grep jdk</span><br><span class="line">rpm -qa |grep gcj</span><br><span class="line">//若上面有输出信息则执行</span><br><span class="line">rpm -qa | grep java | xargs rpm -e --nodeps</span><br><span class="line">//如果是使用yum安装的JDK，使用此命令卸载</span><br><span class="line">yum -y remove java-1.8.0-openjdk-headless.x86_64</span><br><span class="line">//安装</span><br><span class="line">//检查yum中有没有java1.8安装包</span><br><span class="line">yum list java-1.8*</span><br><span class="line">//开始安装</span><br><span class="line">yum install java-1.8.0-openjdk* -y</span><br><span class="line">//安装完毕后验证</span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line">若安装成功则输出</span><br><span class="line">openjdk version &quot;1.8.0_222&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_222-b10)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、Tomcat安装（Centos7）"><a href="#二、Tomcat安装（Centos7）" class="headerlink" title="二、Tomcat安装（Centos7）"></a>二、Tomcat安装（Centos7）</h2><p>Tomcat的安装已经使用yum方式（是真方便）</p><p>yum默认安装的是稳定版本，不是最新版</p><p>1.输入安装命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum  -y  install tomcat</span><br></pre></td></tr></table></figure><p>2.启动tomcat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl   start  tomcat    //启动</span><br><span class="line">systemctl  enable tomcat   //开机自启</span><br></pre></td></tr></table></figure><p>3.查看状态  Active:显示绿色 active(running)表示启动成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status tomcat</span><br></pre></td></tr></table></figure><p><img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221012181332289.png" alt="image-20221012181332289"></p><p>4.进入测试页面，到浏览器输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">虚拟机端口号：8080</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;若可以成功访问到tomcat页面则安装成功，若访问失败说明依赖组件未安装完整</p><p>5.解决问题：组件安装完整，输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install tomcat-webapps tomcat-admin-webapps</span><br></pre></td></tr></table></figure><p>6.确认Tomcat状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status tomcat</span><br></pre></td></tr></table></figure><p>7.测试，按理来说到这里就可以成功安装Tomcat了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">虚拟机端口号：8080</span><br><span class="line">//若需要关闭tomcat可以直接杀进程</span><br><span class="line">ps -ef | grep tomcat  //查看进程</span><br><span class="line">kill -9 xxxx  //xxxx为查看到的tomcat进程  -9表示强制结束</span><br></pre></td></tr></table></figure><p>这里要提一笔，有些时候需要对防火墙进行操作，防火墙的相关命令</p><h2 id="FireWalld-命令"><a href="#FireWalld-命令" class="headerlink" title="FireWalld   命令"></a>FireWalld   命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld  /   firewalld-cmd-state//查看防火墙状态 此处 / 是或的意思</span><br><span class="line"></span><br><span class="line">systemctl stop firewalld//暂时关闭防火墙</span><br><span class="line"></span><br><span class="line">systemctl disable firewalld //永久关闭防火墙</span><br><span class="line"></span><br><span class="line">systemctl start firewalld//开启防火墙</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent//开放8080端口，此处可以根据tomcat配置的接口位置更改</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --remove-port=8080/tcp --permanent //关闭指定接口</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload  //立即生效</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --list-ports//查看开放的端口</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意:</strong><br>1、systemctl是管理Linux中服务的命令，可以对服务进行启动、停止、重启、查看状态等操作</p><p>2、firewall-cmd是Linux中专门用于控制防火墙的命令</p><p>3、为了保证系统安全，服务器的防火墙不建议关闭（自己虚拟机服务器就随意霍霍）</p><h2 id="三、MySQL安装（Centos7）"><a href="#三、MySQL安装（Centos7）" class="headerlink" title="三、MySQL安装（Centos7）"></a>三、MySQL安装（Centos7）</h2><p>1.首先检测当前系统中是否安装MySQL数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa//查询当前系统中安装的所有软件</span><br><span class="line">rpm -qa | grep mysql//查询当前系统中安装的名称带mysql的软件</span><br><span class="line">rpm -qa | grep mariadb//查询当前系统中安装的名称带mariadb的软件</span><br><span class="line">//出现这个 这是CentOS7自带的mariadb，会与mysql数据库冲突</span><br><span class="line">mariadb-libs-5.5.68-1.el7.x86_64</span><br><span class="line"></span><br><span class="line">//Rpm(Red-Hat Package Mangager)Rpm软件包管理系统，是红帽Linux用于管理和安装软件的工具</span><br><span class="line">这里系统若已安装mysql数据库，安装会失败，</span><br><span class="line"></span><br><span class="line">若软件中有CentOS7自带的mariadb,执行卸载命令</span><br><span class="line">rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64</span><br><span class="line">再次查询就没有这个软件了</span><br></pre></td></tr></table></figure><p>2.现在可以用我们万能的 yum 来进行安装Mysql了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//下载mysql源安装包</span><br><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line"></span><br><span class="line">//安装mysql源</span><br><span class="line">yum localinstall mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line"></span><br><span class="line">//检查mysql源是否安装成功</span><br><span class="line">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class="line">出现三行红色的mysql有关的就成功了</span><br><span class="line"></span><br><span class="line">//安装mysql  </span><br><span class="line">yum install mysql-community-server</span><br><span class="line">这里安装可能会出现</span><br><span class="line">问题一：</span><br><span class="line"> ’失败的软件包是：mysql-community-client-5.7.40-1.el7.x86_64</span><br><span class="line"> GPG  密钥配置为：file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql‘</span><br><span class="line"></span><br><span class="line">//两种解决方案</span><br><span class="line">1.yum install mysql-community-server --nogpgcheck   //在yum install 版本后面加上 --nogpgcheck，绕过GPG验证成功安装</span><br><span class="line">2.rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022 //执行完毕这个命令再安装</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">问题二：Error: Unable to find a match: mysql-community-server</span><br><span class="line">方案：yum module disable mysql</span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.检查mysql服务，并设置开机自启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld   //启动</span><br><span class="line"></span><br><span class="line">systemctl status mysqld  //查看MySQL的启动状态  有绿色的 Avtive：active 就成功了</span><br><span class="line"></span><br><span class="line">//设置开机自启动</span><br><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>4.修改root本地登录密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log  //查询默认密码</span><br><span class="line">root@localhost:  后面是默认密码</span><br><span class="line"></span><br><span class="line">登入mysql修改密码</span><br><span class="line">mysql -uroot -p   //登入后输入密码</span><br><span class="line"></span><br><span class="line">set global validate_password_length=4;  //将密码长度最低限制到4</span><br><span class="line"> </span><br><span class="line">set global validate_password_policy=LOW;//设置安全密码等级低</span><br><span class="line"></span><br><span class="line">set password=password(&#x27;root&#x27;);//设置密码为root</span><br><span class="line"></span><br><span class="line"> grant all on*.*to&#x27;root&#x27;@&#x27;%&#x27;identified by &#x27;root&#x27;;//开启访问权限</span><br><span class="line"> </span><br><span class="line"> flush privileges;//刷新访问权限</span><br></pre></td></tr></table></figure><p> 5安装完成后就可以正常登入了，我们尝试外部连接一下</p><p>打开windows下的Navicat </p><p>&#x3D;&gt;新建连接  &#x3D;》连接名随便 &#x3D;》主机写虚拟机的ip&#x3D;&gt;密码填写刚刚设置的root&#x3D;&gt;测试连接&#x3D;》连接成功</p><h2 id="四、lrzsz安装"><a href="#四、lrzsz安装" class="headerlink" title="四、lrzsz安装"></a>四、lrzsz安装</h2><p>介绍：用于linux文件上传和下载的软件（个人感觉没必要）</p><p>这里依旧使用 yyds的 yum安装  </p><p>1.安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install lrzsz.x86_64</span><br></pre></td></tr></table></figure><p>2.完成</p><p>3.使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">rz</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cache</title>
      <link href="/2020/10/13/Spring%20Cache/"/>
      <url>/2020/10/13/Spring%20Cache/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h1><h2 id="Spring-Cache介绍"><a href="#Spring-Cache介绍" class="headerlink" title="Spring Cache介绍"></a>Spring Cache介绍</h2><p>Spring cache是一个<strong>框架</strong>，实现了<strong>基于注解的缓存功能</strong>，只需要简单地加一个注解，就能实现缓存功能。</p><p>Spring Cache提供了一层抽象，底层可以切换不同的cache实现。具体就是通过cacheManager接口来统一不同的缓存技术。</p><p>CacheManager是Spring提供的各种缓存技术抽象接口。</p><p>针对不同的缓存技术需要实现不同的CacheManager:</p><table><thead><tr><th>CacheManager</th><th>描述</th></tr></thead><tbody><tr><td>EhCacheCacheManager</td><td>使用EhCache作为缓存技术</td></tr><tr><td>GuavaCacheManager</td><td>使用Google的GuavaCache作为缓存技术</td></tr><tr><td>RedisCacheManager</td><td>使用Redis作为缓存技术</td></tr></tbody></table><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><table><thead><tr><th>注解</th><th>说明</th><th>属性值</th></tr></thead><tbody><tr><td>@EnableCahing</td><td>开启缓存注解功能</td><td></td></tr><tr><td>@Cacheable</td><td>在方法执行前spring查看缓存是否有数据，如果有数据则直接返回缓存数；若没有数据，则调用方法并将方法的返回值放到缓存中</td><td>value: 缓存名称，每个缓存名称下都可以有多个<br>key：缓存的key<br>condition:当满足某种体哦阿健时才缓存数据<br>unless:当满足某种条件则不缓存</td></tr><tr><td>@CachePut</td><td>将方法的返回值放入缓存中</td><td>value: 缓存名称，每个缓存名称下都可以有多个key<br>key：缓存的key</td></tr><tr><td>@CacheEvict</td><td>将一条或多条数据从缓存中删除</td><td>value: 缓存名称，每个缓存名称下都可以有多个key<br/>key：缓存的key ,可以从参数或者返回值获取<br>参数获取：key&#x3D;”#参数名.xxx”或者key&#x3D;”#root.args[0].xxx”获取第一个参数的xxx<br>或者key&#x3D;“#p0”获取方法的第一个参数<br>返回值获取xxx key&#x3D;”#result.xxx”</td></tr></tbody></table><p>在spring boot项目中，使用缓存技术只需要在项目中倒入相关缓存技术的依赖包，并在启动类中使用</p><p>@EnableCahing开启缓存支持即可</p><p>例如：使用Redis作为缓存技术，只需要导入Spring date Redis的Maven坐标即可</p><p>导入的maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//扩展了对缓存技术的整合</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">//Redis</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件（yml）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spirng:</span> </span><br><span class="line">    <span class="attr">cache:</span></span><br><span class="line">        <span class="attr">redis:</span></span><br><span class="line">          <span class="attr">time-to-live:</span>  <span class="number">1800000</span> <span class="comment">#缓存有效期 单位毫秒 -》30min</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 文件夹作用</title>
      <link href="/2020/10/11/Linux%E5%9F%BA%E7%A1%80%E8%A6%81%E7%82%B9/"/>
      <url>/2020/10/11/Linux%E5%9F%BA%E7%A1%80%E8%A6%81%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux基础要点"><a href="#Linux基础要点" class="headerlink" title="Linux基础要点"></a>Linux基础要点</h1><h2 id="1-各个初级文件夹的作用"><a href="#1-各个初级文件夹的作用" class="headerlink" title="1.各个初级文件夹的作用"></a>1.各个初级文件夹的作用</h2><table><thead><tr><th>目录名称</th><th>目录作用</th></tr></thead><tbody><tr><td><strong>&#x2F;bin</strong></td><td><strong>存放大多数系统命令，如cat、mkdir、mv、cp、tar、chmod等</strong>‘</td></tr><tr><td>&#x2F;boot</td><td>存放开机所需的文件，开机时载入开机管理系统，并映入到内存中</td></tr><tr><td>&#x2F;dev</td><td>存放设备文件</td></tr><tr><td>&#x2F;etc</td><td>存放大多数Linux系统引导所需的配置文件，如gconf、yum、conf、hosts等</td></tr><tr><td>&#x2F;home</td><td>存放用户账号，系统管理员添加用户时，在此文件目录下创建并默认有Desktop目录</td></tr><tr><td>&#x2F;lib</td><td>存放系统程序文件，包含C编译程序所需的函数库，是一组二进制文件</td></tr><tr><td>&#x2F;mnt</td><td>常用挂载点，专门外挂文件系统的，里面可能包含cdrom、hgfs、floopy等</td></tr><tr><td>&#x2F;opt</td><td>第三方程序安装目录，如Linux QQ</td></tr><tr><td>&#x2F;proc</td><td>存放记录系统状态的文件</td></tr><tr><td>&#x2F;root</td><td>管理员目录，存放Desktop等</td></tr><tr><td>&#x2F;sbin</td><td>超级管理员目录，包含一些重要的命令  ，如 shutdown、 dump等</td></tr><tr><td>&#x2F;tmp</td><td>临时文件，用于临时的存储，存在中间产生的临时文件</td></tr><tr><td>&#x2F;usr</td><td>包含其他一些重要内容，如bin、sbin、lib、include等</td></tr><tr><td>&#x2F;var</td><td>存放系统定义表，以便在系统运行改变临时备份目录，如cache、ftp、mail、www等</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA整合Git</title>
      <link href="/2020/10/10/IDEA%E6%95%B4%E5%90%88git/"/>
      <url>/2020/10/10/IDEA%E6%95%B4%E5%90%88git/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA整合Git"><a href="#IDEA整合Git" class="headerlink" title="IDEA整合Git"></a>IDEA整合Git</h1><h2 id="一、Git"><a href="#一、Git" class="headerlink" title="一、Git"></a>一、Git</h2><h3 id="1-1简介"><a href="#1-1简介" class="headerlink" title="1.1简介"></a>1.1简介</h3><p>Git是一个分布式版本控制工具，通常用来对软件的开发过程中源代码文件进行管理，通过Git仓库来存储和管理这些文件，Git仓库分为两种</p><ul><li>本地仓库：开发者电脑上的Git仓库，代码提交需要使用<strong>commit</strong>命令，获取远程仓库需要使用pull命令</li><li>远程仓库：远程服务器上的Git仓库，推送本地仓库内容需要使用到<strong>push</strong>命令</li></ul><p>大致图示：（取自bilibili：黑马程序员）</p><p>​<img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221010145414517.png" alt="image-20221010145414517"></p><h3 id="1-2下载与安装Git"><a href="#1-2下载与安装Git" class="headerlink" title="1.2下载与安装Git"></a>1.2下载与安装Git</h3><p>Git下载官网：</p><p>​<a href="https://git-scm.com/">https://git-scm.com/</a></p><h4 id="1-2-1-下载Git"><a href="#1-2-1-下载Git" class="headerlink" title="1.2.1  下载Git"></a>1.2.1  下载Git</h4><p>​1.打开官网，选择DownLoads</p><p><img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221010145745840.png" alt="image-20221010145745840"></p><p>​2.64位选择64</p><p><img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221010145923230.png" alt="image-20221010145923230"></p><p>​3.点击后会下载最新版本安装文件(网络可能会连接不上，请使用魔法)，具体看文章 魔法的使用</p><p><img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221010150004445.png" alt="image-20221010150004445"></p><h4 id="1-2-2安装Git"><a href="#1-2-2安装Git" class="headerlink" title="1.2.2安装Git"></a>1.2.2安装Git</h4><p>傻瓜式下一步即可（深得我心），安装完成后再任意目录右击鼠标，看到以下内容就安装成功了</p><p>（bilibili黑马程序员）<img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221010151553507.png" alt="image-20221010151553507"></p><p><strong>Git GUI Here :</strong> 打开Git图形界面</p><p><strong>Git Bash Here :</strong> 打开Git命令行</p><h3 id="1-3Git代码托管服务"><a href="#1-3Git代码托管服务" class="headerlink" title="1.3Git代码托管服务"></a>1.3Git代码托管服务</h3><h4 id="1-3-1常用代码托管服务"><a href="#1-3-1常用代码托管服务" class="headerlink" title="1.3.1常用代码托管服务"></a>1.3.1常用代码托管服务</h4><p>Git中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建Git远程仓库呢?<br>我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。</p><ul><li><p>**gitHub **(地址:  <a href="https://github.com/">https://github.com/</a>  )，是一个面向开源及私有软件项目的托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名gitHub</p></li><li><p><strong>码云</strong>（地址: <a href="https://gitee.com/">https://gitee.com/</a> )，是国内的一个代码托管平台，由于服务器在国内，所以相比于GitHub，码云速度会更快</p></li><li><p><strong>GitLab</strong> (地址: <a href="https://labout.gitlab.com/">https://labout.gitlab.com/</a> )，是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务</p></li><li><p><strong>BitBucket</strong>(地址: <a href="https://bitbucket.org/)%EF%BC%8C%E6%98%AF%E4%B8%80%E5%AE%B6%E6%BA%90%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E7%BD%91%E7%AB%99%EF%BC%8C%E9%87%87%E7%94%A8Mercurial%E5%92%8CGit%E4%BD%9C%E4%B8%BA%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%EF%BC%8C%E5%90%8C%E6%97%B6%E6%8F%90%E4%BE%9B%E5%95%86%E4%B8%9A%E8%AE%A1%E5%88%92%E5%92%8C%E5%85%8D%E8%B4%B9%E8%B4%A6%E6%88%B7">https://bitbucket.org/)，是一家源代码托管网站，采用Mercurial和Git作为分布式版本控制系统，同时提供商业计划和免费账户</a></p></li></ul><h4 id="1-3-2使用码云（gitee）代码托管服务"><a href="#1-3-2使用码云（gitee）代码托管服务" class="headerlink" title="1.3.2使用码云（gitee）代码托管服务"></a>1.3.2使用码云（gitee）代码托管服务</h4><p>2022年5 月 18 日开始 Gitee 仓库开源须审核了，虽然也能用，但是没那么快了，这里有魔法的就到github上吧，和gitee类似，只不过是英文的，安装个中文插件就行</p><p>使用码云的操作流程如下:</p><p>1、注册码云账号<br>2、登录码云（1、 2这里就不过多赘述了，纯中文）<br>3、创建远程仓库</p><p><img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221010153307169.png" alt="image-20221010153307169"></p><p><img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221010153644319.png" alt="image-20221010153644319"></p><p>设置开源麻烦的一13</p><p>4、邀请其他用户成为仓库成员</p><p><img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221010155603065.png" alt="image-20221010155603065"></p><h2 id="二、Git常用命令"><a href="#二、Git常用命令" class="headerlink" title="二、Git常用命令"></a>二、Git常用命令</h2><h3 id="2-1Git全局设置"><a href="#2-1Git全局设置" class="headerlink" title="2.1Git全局设置"></a>2.1Git全局设置</h3><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息。<br>在Git命令行中执行下面命令:</p><ul><li><p><strong>设置用户信息</strong></p><ul><li>git config –global user.name “itcast”</li><li>git config –global user.email “<a href="mailto:&#x68;&#101;&#x6c;&#x6c;&#x6f;&#64;&#x69;&#116;&#99;&#x61;&#115;&#116;&#x2e;&#x63;&#x6e;">&#x68;&#101;&#x6c;&#x6c;&#x6f;&#64;&#x69;&#116;&#99;&#x61;&#115;&#116;&#x2e;&#x63;&#x6e;</a>“</li></ul></li><li><p><strong>查看配置信息</strong></p><ul><li>git config –list</li></ul></li></ul><p>注意:上面设置的user.name和user.email并不是我们在注册码云账号时使用的用户名和邮箱，此处可以任意设置。</p><h3 id="2-2获取Git仓库"><a href="#2-2获取Git仓库" class="headerlink" title="2.2获取Git仓库"></a>2.2获取Git仓库</h3><p>要使用Git对我们的代码进行版本控制，首先需要获得Git仓库。<br>获取Git仓库通常有两种方式:</p><ul><li>在本地初始化一个Git仓库（不常用)</li></ul><p>​执行步骤如下:</p><ol><li>在任意目录下创建一个空目录（例如repo1）作为我们的本地Git仓库</li><li>进入这个目录中，点击右键打开Git bash窗口</li><li>执行命令git init</li></ol><p>如果在当前目录中看到.git文件夹（此文件夹为<strong>隐藏文件夹</strong>）则说明Git仓库创建成功</p><p>(bilibili黑马程序员)</p><p><img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221010161156016.png" alt="image-20221010161156016"></p><ul><li><p>从远程仓库克隆（常用)</p><p>可以通过Git提供的命令从远程仓库进行克隆，将远程仓库克隆到本地</p><p>命令形式： git clone  远程仓库地址（例：<a href="https://github.com/xxx/xxx%EF%BC%89">https://github.com/xxx/xxx）</a></p><p>(bilibili黑马)</p><p><img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221010161524691.png" alt="image-20221010161524691"></p></li></ul><h3 id="2-3Git的工作区、暂存区、版本库-概念"><a href="#2-3Git的工作区、暂存区、版本库-概念" class="headerlink" title="2.3Git的工作区、暂存区、版本库 概念"></a>2.3Git的工作区、暂存区、版本库 概念</h3><p>为了更好的学习Git，我们需要了解Git相关的一些概念</p><p><strong>版本库</strong>:前面看到的.git隐藏文件夹就是版本库，版本库中存储了很多配置信息、日志信息和文件版本信息等</p><p><strong>工作区</strong>:包含.git文件夹的目录就是工作区，也称为工作目录，主要用于存放开发的代码</p><p><strong>暂存区</strong>:.git文件夹中有很多文件，其中有一个index文件就是暂存区，也可以叫做stage。</p><p>暂存区是一个临时保存修改文件的地方</p><p>（bilibili黑马）</p><p><img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221010161825663.png" alt="image-20221010161825663"></p><p>Git工作区中的文件存在两种状态:<br>untracked <strong>未跟踪</strong>（未被纳入版本控制) 这类文件需要先git add后再git commit</p><p>tracked <strong>已跟踪</strong>（被纳入版本控制)这类文件需要再不爆红后使用git commit提交到版本库</p><ol><li><p>​ Unmodified 未修改状态</p></li><li><p>​ Modified 已修改状态</p></li><li><p>​     Staged 已暂存状态</p><p>注意:这些文件的状态会随着我们执行Git的命令发生变化（使用git status查看工作区文件状态）</p></li></ol><h3 id="2-4Git本地仓库常用命令"><a href="#2-4Git本地仓库常用命令" class="headerlink" title="2.4Git本地仓库常用命令"></a>2.4Git本地仓库常用命令</h3><ul><li><p>git status</p><p>查看文件状态</p></li><li><p>git add  </p><p>+文件名</p><p>将文件的修改加入暂存区</p></li><li><p>git reset</p><p>将暂存区的文件取消暂存或者是切换到指定版本</p></li><li><p>git commit  </p><p>将暂存区的文件修改提交到版本库</p><p>-m “修改的注释信息”</p><p>+文件名（）     指定文件提交</p></li><li><p>git log</p></li></ul><p>​查看日志</p><p><strong>git reset 命令</strong></p><p>git reset  –hard  版本号（git log 查看commit后面就是）</p><p><img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221010164117656.png" alt="image-20221010164117656"></p><p>每个版本号都类似一次快照机制，可以将工作区回到当时的版本状态</p><h3 id="2-5Git远程仓库常用命令"><a href="#2-5Git远程仓库常用命令" class="headerlink" title="2.5Git远程仓库常用命令"></a>2.5Git远程仓库常用命令</h3><ul><li>git remote 查看远程仓库默认别名origin  -v 查看详细路径</li><li>git remote add 添加远程仓库  git remote add 别名 url</li><li>git clone 从远程仓库克隆</li><li>git pull 从远程仓库拉取</li><li>git push 推送到远程仓库 git push 仓库别名 分支名称</li></ul><h3 id="2-6分支操作"><a href="#2-6分支操作" class="headerlink" title="2.6分支操作"></a>2.6分支操作</h3><p>分支是git使用过程中非常重要的概念。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。同一个仓库可以有多个分支，各个分支相互独立，互不干扰。通过git init命令创建本地仓库时默认会创建一个master分支。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- git branch 查看分支</span><br><span class="line">- git branch [name] 创建分支</span><br><span class="line">- git checkout [name] 切换分支</span><br><span class="line">- git push [shortName] [name] 推送至远程仓库分支</span><br><span class="line">- git merge [name] 合并分支</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux and java</title>
      <link href="/2020/10/10/Java%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2020/10/10/Java%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Java项目部署Linux"><a href="#Java项目部署Linux" class="headerlink" title="Java项目部署Linux"></a>Java项目部署Linux</h1><p>项目部署分为两种</p><ul><li>手工部署</li><li>shell脚本部署</li></ul><h2 id="一、手工部署"><a href="#一、手工部署" class="headerlink" title="一、手工部署"></a>一、手工部署</h2><p>1.将项目打成jar包，使用maven的package</p><img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221012213500575.png" alt="image-20221012213500575" style="zoom:75%;" /><p>2.在虚拟机中创建存放jar包的目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/app</span><br><span class="line">//cd到本目录中，将jar包上传到此处</span><br><span class="line">使用命令</span><br><span class="line">java -jar 包名.jar</span><br><span class="line">即可成功运行</span><br></pre></td></tr></table></figure><p>3.设置后台运行，并将日志输出到日志文件中</p><p>这里就有个重要的命令   </p><table><thead><tr><th>nohup</th><th>no hang up(不挂起)</th><th>用于不挂断的运行指定命令，退出终端不会受影响</th><th>语法格式：nohup Command [Arg…] [&amp;]</th></tr></thead></table><p>参数说明：</p><ul><li>Command:要执行的命令</li><li>Arg：一些参数，可以指定输出文件</li><li>&amp;：让命令在后台运行</li></ul><p>ex: nohup java -jar  boot工程.jar &amp;&gt;bootLog.log &amp;  后台运行java -jar 命令，并将日志输出到hello.log文件中</p><p>4.停止springboot程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep &#x27;java -jar&#x27;</span><br><span class="line">//查询出来进程后</span><br><span class="line">kill -9 进程号</span><br></pre></td></tr></table></figure><p>手动部署完成</p><h2 id="二、自动部署"><a href="#二、自动部署" class="headerlink" title="二、自动部署"></a>二、自动部署</h2><p>通过shell脚本自动部署项目</p><p>在linux上安装git、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum list git //列出git版本</span><br><span class="line">yum -y install git //在线安装 </span><br><span class="line"></span><br><span class="line">cd /usr/loacl/</span><br><span class="line">//使用Git克隆代码  这里需要事先创建一个github的库，并将自己的文件上传到git上</span><br><span class="line">git clone git地址   //github地址建议添加到gitee上</span><br><span class="line">克隆成功</span><br></pre></td></tr></table></figure><p>安装maven</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">将安装包放到 /usr/local下</span><br><span class="line">执行执行命令</span><br><span class="line">tar -zxvf apache-maven-3.5.4-bin.tar.gz</span><br><span class="line">vim /etc/proflie  修改配置文件</span><br><span class="line">最下方加入</span><br><span class="line">export MAVEN_HOME=/usr/local/apache-maven-3.5.4</span><br><span class="line">export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">//修改完成后</span><br><span class="line">source /etc/profile</span><br><span class="line">//再使用  查看是否配置成功</span><br><span class="line">mvn -version</span><br><span class="line">配置成功提示</span><br><span class="line">Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)</span><br><span class="line">Maven home: /usr/local/apache-maven-3.5.4</span><br><span class="line">Java version: 1.8.0_345, vendor: Red Hat, Inc., runtime: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.345.b01-1.el7_9.x86_64/jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class="line">OS name: &quot;linux&quot;, version: &quot;3.10.0-1160.76.1.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br><span class="line"></span><br><span class="line">//在 /usr/local 创建repo 作为本地仓库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//修改set.xml文件 </span><br><span class="line">在setting下添加</span><br><span class="line">&lt;localRepository&gt;/usr/local/repo&lt;/localRepository&gt;</span><br><span class="line"></span><br><span class="line">配置镜像</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><p>将脚本文件在&#x2F;usr&#x2F;local下创建sh目录存放脚本文件</p><p>可以通过ll查看当前用户对该目录下文件的权限</p><p><img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221013143211397.png" alt="image-20221013143211397"></p><h2 id="为用户授权"><a href="#为用户授权" class="headerlink" title="为用户授权"></a>为用户授权</h2><p>这里就要提到chmod命令   可以通过八进制数来指定权限</p><table><thead><tr><th>#</th><th>权限</th><th>rwx</th></tr></thead><tbody><tr><td>7</td><td>读+写+执行</td><td>rwx</td></tr><tr><td>6</td><td>读+写</td><td>rw-</td></tr><tr><td>5</td><td>读+执行</td><td>r-x</td></tr><tr><td>4</td><td>只读</td><td>r–</td></tr><tr><td>3</td><td>写+执行</td><td>-wx</td></tr><tr><td>2</td><td>只写</td><td>-w-</td></tr><tr><td>1</td><td>只执行</td><td>–x</td></tr><tr><td>0</td><td>无</td><td>—</td></tr></tbody></table><p>举例：chmod 777  fileName 为所有的用户赋予读写执行权限</p><ul><li>第一位数是  文件拥有者的权限</li><li>第二位数是  同组用户的权限</li><li>第三位数是  其他用户的权限</li></ul><h3 id="设置静态ip"><a href="#设置静态ip" class="headerlink" title="设置静态ip"></a>设置静态ip</h3><p>设置静态ip是为了将虚拟机的ip固定在一个ip上，</p><p>打开我们的虚拟机网络编辑器会发现我们的子网IP是在一个范围之内的而不是固定的，当服务器宕机后可能会ip会发送改变</p><p><img src="C:\Users\31801\AppData\Roaming\Typora\typora-user-images\image-20221013145313107.png" alt="image-20221013145313107"></p><p>因此我们需要设置一个静态的ip</p><p>修改文件 &#x2F;etc&#x2F;network-scripts&#x2F;ifcfg-enxxx</p><p>这里的enxxx表示后缀名不同，不一样的虚拟机系统后缀不同</p><p>cat发现这些内容   我们需要将部分内容修改和添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">BOOTPROTO=&quot;dhcp&quot;     //BOOTPROTO=&quot;static&quot;</span><br><span class="line">/*以下部分酌情修改</span><br><span class="line">IPADDR=&quot;192.168.33.XXX&quot;//XXX前面部分需要和上图子网ip前段相同  设置的静态ip地址</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;//子网掩码</span><br><span class="line">GATEWAY=&quot;192.168.33.2&quot;//网关地址</span><br><span class="line">DNS1=&quot;192.168.33.2&quot;//DNS服务器</span><br><span class="line">注意  ： 静态ip、网关、DNS的网端都需要和子网IP保持一致</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">PEERDNS=&quot;yes&quot;</span><br><span class="line">PEERROUTES=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_PEERDNS=&quot;yes&quot;</span><br><span class="line">IPV6_PEERROUTES=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">NAME=&quot;eno16777736&quot;</span><br><span class="line">UUID=&quot;d22da147-fda7-474e-9211-a70e786c9eae&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br></pre></td></tr></table></figure><p>修改完成后重启服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2020/10/10/Linux%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/10/10/Linux%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><p>[TOC]</p><h2 id="其一"><a href="#其一" class="headerlink" title="其一"></a>其一</h2><h3 id="ls-pwd-cd-touch-mkdir-rm"><a href="#ls-pwd-cd-touch-mkdir-rm" class="headerlink" title="ls pwd cd touch mkdir rm"></a>ls pwd cd touch mkdir rm</h3><table><thead><tr><th align="left">序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td align="left">1</td><td>ls</td><td>list</td><td>查看当前目录下内容</td></tr><tr><td align="left">2</td><td>pwd</td><td>print work directory</td><td>查看当前所在目录</td></tr><tr><td align="left">3</td><td>cd 目录名</td><td>change directory</td><td>切换目录</td></tr><tr><td align="left">4</td><td>touch 文件名</td><td>touch</td><td>如果文件不存在，新建文件</td></tr><tr><td align="left">5</td><td>mkdir 目录名</td><td>make directory</td><td>创建目录</td></tr><tr><td align="left">6</td><td>rm文件名</td><td>remove</td><td>删除指定文件</td></tr></tbody></table><h2 id="其二"><a href="#其二" class="headerlink" title="其二"></a>其二</h2><h3 id="cat-more-tail-mkdir-rmdir-rm"><a href="#cat-more-tail-mkdir-rmdir-rm" class="headerlink" title="cat  more  tail  mkdir  rmdir rm"></a>cat  more  tail  mkdir  rmdir rm</h3><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>cat 文件名</td><td>concatenate</td><td>连接文件并打印到标准输出设备上</td></tr><tr><td>2</td><td>more 文件名</td><td>moer</td><td><b>以分页形式显示文件内容<b/> <br> 回车键   向下滚动一行<br> 空格键   向下滚动一屏<br> b            返回上一屏<br/>q或者Ctrl+C   退出more<br/></td></tr><tr><td>3</td><td>tail [-f] 文件名</td><td>tail</td><td>查看文件末尾内容<br>-f  :动态读取&#x2F;itcast目录下my.log文件末尾内容并显示<br>-数字 显示文件末尾多少行的内容，不写默认10行  <br></td></tr><tr><td>4</td><td>mkdir [-p] dirName</td><td>make directory</td><td>创建目录<br>-p 确保目录名称存在，不存在就创建，通过此选项可以多层同时创建</td></tr><tr><td>5</td><td>rmdir [-p] dirName</td><td>remove  directory</td><td>删除空目录<br>-p 删除  多层目录下的子目录，若最后外层目录也为空目录则也被删除<br>例： rmdir xxx*  删除名称以itcast开始的空目录</td></tr><tr><td>6</td><td>rm [-rf] name</td><td>remove</td><td>删除文件或目录<br>-r 将目录及目录中所有文件（目录逐一删除，递归）<br>-f 无需确认，直接删除<br>例： rm -r itcast&#x2F;  删除名为itcast的目录和目录中的所有文件，删除前需要确认<br>rm -rf itcast&#x2F; 删除无需确认，直接删除名为itcast的目录和目录中的所有文件<br>rm -f hello.txt  无需确认直接删除名为hello.txt的文件</td></tr></tbody></table><h2 id="其三"><a href="#其三" class="headerlink" title="其三"></a>其三</h2><h3 id="cp-mv"><a href="#cp-mv" class="headerlink" title="cp  mv"></a>cp  mv</h3><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>cp [-r] source dest</td><td>copy</td><td>用于复制文件或目录<br>-r 如果复制的是目录则需要此选项，也会将其下的子目录和文件拷贝<br>source 拷贝文件地址 <br>dest 拷贝文件目的地<br>ex: <br>cp hello.txt itcast&#x2F;   将hello.txt拷贝到itcast目录下<br>cp hello.txt .&#x2F;hi.txt  将hello.txt拷贝到当当前目录，并改名为hi.txt<br>cp -r itcast&#x2F; .&#x2F;itheima&#x2F;  将itcast目录和其目录下所有文件复制到 itheima目录下<br>cp -r itcast&#x2F;* .&#x2F;itheima&#x2F; 将itcast目录下所有文件复制到itheima目录下，不包括itcast</td></tr><tr><td>2</td><td>mv source dest</td><td>move</td><td>为文件或目录改名、或将文件或目录移动到其他位置<br>mv hello.txt hi.txt 将hi改名为hi.txt<br>mv hi.txt itheima&#x2F; 将hi.txt 移动到 itheima目录下<br>mv hi.txt itheima&#x2F;hello.txt 将hi.txt移动到 itheima目录下并改名为heillo<br>mv itcast&#x2F; itheima&#x2F; 如果itheima目录不存在，将itcast目录改名为itheima<br>mv itcast&#x2F; itheima&#x2F; 如果itheima目录存在，将itcast目录移动到itheima目录中</td></tr></tbody></table><h2 id="其四"><a href="#其四" class="headerlink" title="其四"></a>其四</h2><h3 id="tar-vi-x2F-vim"><a href="#tar-vi-x2F-vim" class="headerlink" title="tar vi &#x2F; vim"></a>tar vi &#x2F; vim</h3><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>tar [-zcxvf] fileName [files]</td><td>tape archive</td><td>对文件进行打包、解包、压缩、解压<br>包文件后缀为.tar表示只完成了打包，并没有压缩<br>包文件后缀为.tar.gz表示打包的同时还进行了压缩<br>-z z表示为gzip 通过gzip命令处理文件，gzip还可以对文件压缩或解压<br>-c c代表的是create，即表示创建新的包文件<br>-x x代表的是extract,实现从包文件中还原文件<br>-v v代表的是verbose,显示命令的执行过程<br>-f f代表的是file,用于指定包文件的名称</td></tr><tr><td>2</td><td>vi&#x2F;vim fileName</td><td></td><td>vi 命令是Linux系统提供的一个文本编辑工具，可以对文件内容进行编辑类似于windows中的记事本<br>vim 是从vi发展来的一个功能更强大的文本编辑工具，在编辑文件时可以对文本内容进行着色，方便我们对文件进行编辑处理，所以实际工作中vim更加常用</td></tr></tbody></table><h3 id="vim的三种模式"><a href="#vim的三种模式" class="headerlink" title="vim的三种模式"></a>vim的三种模式</h3><p>1.命令模式</p><ul><li>命令模式下可以查看文件内容、移动光标（上下左右箭头、gg、G）</li><li>通过vim命令打开文件后，默认进入命令模式</li><li>另外两种模式需要首先进入命令模式，才能进入彼此</li></ul><p>2.插入模式</p><ul><li>插入模式下可以对文件内容进行编辑</li><li>在命令模式下按下【i,a,o】任意一个，可以进入插入模式，进入插入模式后，下方会出现【insert】 字样</li><li>在插入模式下按下ESC键，回到命令模式</li></ul><p>3.底行模式</p><ul><li>底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作</li><li>在命令模式下按下【：，&#x2F;】任意一个可以进入底行模式</li><li>通过&#x2F;方式进入底行模式后，可以对文件内容进行查找</li><li>通过：方式进入底行模式后，可以输入wq（保存并退出） 、q!(不保存退出)、set nu(显示行号)</li></ul><h2 id="其五"><a href="#其五" class="headerlink" title="其五"></a>其五</h2><h3 id="find-grep"><a href="#find-grep" class="headerlink" title="find grep"></a>find grep</h3><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>find dirName -option fileName</td><td>find</td><td>在指定目录下查找文件<br>. -name “*.java” 在当前目录及其子目录下查找以.java结尾的文件<br>&#x2F;itcast -name “.java” 在&#x2F;itcast目录及其子目录下查找.java结尾的文件</td></tr><tr><td>2</td><td>grep word fileName</td><td>global regular expression print</td><td>从指定文件中查找指定的文本内容<br>grep name Hello.java<br>grep hello *.java</td></tr></tbody></table><h2 id="其六"><a href="#其六" class="headerlink" title="其六"></a>其六</h2><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>ps</td><td>process status</td><td>显示瞬间行程的状态</td></tr></tbody></table><p>命令示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查看查找tomcat的进程</span><br><span class="line">ps -ef | grep tomcat</span><br></pre></td></tr></table></figure><p>命令参数</p><p>l 长格式输出；</p><p>u 按用户名和启动时间的顺序来显示进程；</p><p>j 用任务格式来显示进程；</p><p>f 用树形格式来显示进程；</p><p>a 显示所有用户的所有进程(包括其它用户)；</p><p>x 显示无控制终端的进程；</p><p>r 显示运行中的进程；</p><p>ww 避免详细参数被截断；</p><p>-A 列出所有的行程</p><p>-w 显示加宽可以显示较多的资讯</p><p>-au 显示较详细的资讯</p><p>-aux 显示所有包含其他使用者的行程</p><p>-e 显示所有进程,环境变量</p><p>-f 全格式</p><p>-h 不显示标题</p><p>-l 长格式</p><p>-w 宽输出</p><p>a  显示终端上地所有进程,包括其他用户地进程</p><p>r  只显示正在运行地进程</p><p>x  显示没有控制终端地进程</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合详解</title>
      <link href="/2020/09/30/%E9%9B%86%E5%90%88%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/09/30/%E9%9B%86%E5%90%88%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="集合详解"><a href="#集合详解" class="headerlink" title="集合详解"></a>集合详解</h1><p>具体内容查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com\itymsd\day20\</span><br></pre></td></tr></table></figure><h2 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1.ArrayList"></a>1.ArrayList</h2><h3 id="特性："><a href="#特性：" class="headerlink" title="特性："></a><strong>特性：</strong></h3><p><strong>线程不安全，可存储重复内容，有序存储</strong></p><h3 id="初始化对象"><a href="#初始化对象" class="headerlink" title="初始化对象"></a><strong>初始化对象</strong></h3><p><strong>的时候</strong>  </p><p><strong>ArrayList()<strong>， 会初始一个</strong>长度为10</strong>的容器</p><p>**ArrayList(Collection c) ** 构造一个包含指定集合的元素列表，按照他们由集合的迭代器返回的顺序</p><p><strong>ArrayList(int initialCapacity)</strong> 构造具有指定初始容量的空列表，   半自动扩容</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>其中最重要的有：    <strong>add ,get , set ,remove ,size</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存放  add(Object o),存放一个对象方法</span></span><br><span class="line"> add(Object o)</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放到指定位置，该位置后面元素往后排   </span></span><br><span class="line">add(<span class="type">int</span> index,<span class="type">int</span> element)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将指定集合内容存放到尾部   </span></span><br><span class="line">addAll(Collection c)</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line"><span class="comment">//将指定集合内容存放到指定位置开始往后存  </span></span><br><span class="line">addAll(<span class="type">int</span> index.Collection c)</span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line"><span class="comment">//清空集合中元素   </span></span><br><span class="line">clear();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定下标元素</span></span><br><span class="line">remove(<span class="type">int</span> index)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//删除指定元素，删除找到的第一个   若不存在该元素则返回false，存在则返回true  </span></span><br><span class="line">remove(Object o)    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">//获得集合存储元素的长度    有返回值</span></span><br><span class="line">size();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取集合中指定下标的元素  返回值为该元素 若不存在该元素则报 java.lang.IndexOutOfBoundsException 异常</span></span><br><span class="line">get(<span class="type">int</span> index);    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">//判断集合中是否含有某元素，存在则返回true不存在返回false   </span></span><br><span class="line">contains(Object o);    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取指定元素在集合中第一次出现的下标  </span></span><br><span class="line">indexOf(Object o);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean 判断集合是否为空集合  为空集合返回true  </span></span><br><span class="line">isEmpty();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  替换集合中指定位置的元素  </span></span><br><span class="line">set(<span class="type">int</span> index , Object o);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 截取集合中指定位置的元素返回到List集合中    </span></span><br><span class="line">List&lt;Object&gt; objects = subList(<span class="type">int</span> first,<span class="type">int</span> end);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h3><p>三种方法</p><p><strong>普通for循环</strong></p><p><strong>增强for循环</strong></p><p><strong>iterator迭代器输出</strong>:注意，迭代器在使用的时候一个迭代器对象只能使用一次，如果需要再次迭代，则需要再次获取一个新的迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Object&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      arrayList.add(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">      arrayList.add(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">      <span class="comment">//普通for循环方式</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayList.size(); i++) &#123;</span><br><span class="line">          System.out.println(arrayList.get(i));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;*************&quot;</span>);</span><br><span class="line">      <span class="comment">//加强for循环</span></span><br><span class="line">      <span class="keyword">for</span> (Object o:arrayList</span><br><span class="line">           ) &#123;</span><br><span class="line">          System.out.println(o);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;**************&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;迭代器输出&quot;</span>);</span><br><span class="line">      <span class="comment">//获取迭代器</span></span><br><span class="line">      Iterator&lt;Object&gt; iterator = arrayList.iterator();</span><br><span class="line">      <span class="comment">//判断迭代器后是否还有值</span></span><br><span class="line">      <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">          <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">          System.out.println(next);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="2-LinkList"><a href="#2-LinkList" class="headerlink" title="2.LinkList"></a>2.LinkList</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性:"></a>特性:</h3><p><strong>没有索引值</strong></p><p><strong>可以存储重复内容</strong></p><p><strong>可以存储值</strong></p><p><strong>但是在存储时，会默认给每一个元素一个下角标</strong> <strong>0  开始</strong>，<strong>类似索引</strong></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>​LinkList();</p><p>​构造一个空列表</p><ul><li><ul><li><code>LinkedList(Collection&lt;? extends E&gt; c)</code> </li><li>构造一个包含指定集合的元素的列表，它们在集合的迭代器返回的顺序中返回。</li></ul></li></ul><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><p>其中重要的有 add   remove   get      ，注意：这里push方法和addFirst可以等价    ，remove（）和 poll（）默认情况下会剔除第一个元素，队列为空情况下remove会报出异常，poll会返回null;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//添加  add(Object o)  讲指定元素添加的链表末尾</span></span><br><span class="line">      linkedList.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">      linkedList.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">      linkedList.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">      linkedList.add(<span class="number">111</span>);</span><br><span class="line"></span><br><span class="line">      play(linkedList);</span><br><span class="line">      <span class="comment">//在指定位置插入元素  add(int index, Object o)</span></span><br><span class="line">      linkedList.add(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">      play(linkedList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//将头部设置为指定元素</span></span><br><span class="line">      linkedList.push(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">      play(linkedList);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//也是放在头部，等同于push</span></span><br><span class="line">      linkedList.addFirst(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">      play(linkedList);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//将元素放在集合尾部</span></span><br><span class="line">      linkedList.addLast(<span class="string">&quot;zzz&quot;</span>);</span><br><span class="line">      play(linkedList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">      <span class="comment">//获取头元素</span></span><br><span class="line">      System.out.println(linkedList.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认删除第一个元素</span></span><br><span class="line">      linkedList.remove();</span><br><span class="line">      play(linkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除找到的第一个指定元素</span></span><br><span class="line">      linkedList.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//删除指定下标的元素</span></span><br><span class="line">      linkedList.remove(<span class="number">5</span>);</span><br><span class="line">      play(linkedList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-HashSet"><a href="#3-HashSet" class="headerlink" title="3.HashSet"></a>3.HashSet</h2><h3 id="特性：-1"><a href="#特性：-1" class="headerlink" title="特性："></a>特性：</h3><p>无序</p><p>不能存储重复内容</p><p>可以存空</p><p>不能根据索引查询</p><h3 id="构造方法："><a href="#构造方法：" class="headerlink" title="构造方法："></a>构造方法：</h3><ul><li><ul><li><code>HashSet()</code>  </li><li>构建了一个新的，空的设置；支持  <code>HashMap</code>实例具有默认初始容量（16）和负载因子（0.75）。</li></ul></li></ul><p>​默认初始化有16大小，负载因子为百分之七十五（即超过百分之七十五就会自动扩容）</p><ul><li><ul><li><code>HashSet(Collection&lt;? extends E&gt; c)</code>  构造一个包含指定集合中的元素的新集合。</li></ul></li><li><ul><li><code>HashSet(int initialCapacity)</code>  </li><li>构建了一个新的，空的设置；支持  <code>HashMap</code>实例具有指定的初始容量和加载因子（0.75）。</li></ul></li><li><ul><li><code>HashSet(int initialCapacity,  float loadFactor)</code>  </li><li>构建了一个新的，空的设置；支持 <code>HashMap</code>实例的指定初始容量和负载因子。</li></ul></li></ul><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><p>重点：add,remove,addAll,contains(查询集合是否含有某个元素，若存在就剔除)</p><p>可以将List集合放入其中，再通过遍历出来，达到去重的目的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Object&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        arrayList.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;zzz&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;zzz&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;zzz&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;未去重的arrayList：&quot;</span>+arrayList);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="comment">//存入arrayList集合去重</span></span><br><span class="line">        hashSet.addAll(arrayList);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;放入hashSet中后：&quot;</span>+hashSet);</span><br><span class="line">        <span class="comment">//清除arrayList的元素</span></span><br><span class="line">        arrayList.clear();</span><br><span class="line">        <span class="comment">//遍历hashSet元素  放到arrayList里</span></span><br><span class="line">        <span class="keyword">for</span> (Object o:hashSet</span><br><span class="line">             ) &#123;</span><br><span class="line">            arrayList.add(o);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;去重后的arrayList：&quot;</span>+arrayList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加单个元素</span></span><br><span class="line">        hashSet.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        System.out.println(hashSet);</span><br><span class="line">        <span class="comment">//查询元素是否存在   contains 查询元素是否在集合中并将其剔除</span></span><br><span class="line">        System.out.println(<span class="string">&quot;bbb是否在集合里？&quot;</span>+hashSet.contains(<span class="string">&quot;bbb&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//去除某个元素  成功返回true  失败返回false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;去除aaa是否成功？：&quot;</span>+hashSet.remove(<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;-------------迭代器输出--------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Object&gt; iterator = arrayList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.print(next+<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-TreeSet"><a href="#4-TreeSet" class="headerlink" title="4.TreeSet"></a>4.TreeSet</h2><h3 id="特性：-2"><a href="#特性：-2" class="headerlink" title="特性："></a>特性：</h3><p>当存入的是一种类型元素时，集合会进行排序且去重，这里是根据Comparator里面的CompareTo方法</p><h3 id="初始化对象："><a href="#初始化对象：" class="headerlink" title="初始化对象："></a>初始化对象：</h3><ul><li><ul><li><code>TreeSet()</code></li></ul><p>构造一个新的、空的树集，根据其元素的自然排序进行排序。</p></li><li><ul><li><code>TreeSet(Collection&lt;? extends E&gt; c)</code></li></ul><p> 构造一个新的树集包含在指定集合的元素，根据其元素的自然排序排序。</p></li><li><ul><li><code>TreeSet(SortedSet&lt;E&gt; s)</code>  </li><li>构造一个包含相同元素的新树集，并使用相同的排序作为指定的排序集。</li></ul></li></ul><h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><p>存入TreeSet的元素需要是同一类型元素，因为会根据CompareTo方法进行排序</p><p>当我们存入学生类，并希望以他的age去排序时，这时Student类就需要实现Comparable接口实现它的compareTo方法</p><p>注意：学生类中尽量使用包装类型，可以通过包装类型里的compareTo方法去比较不用手动去写了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itymsd.day20.set.treeset;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 特点：存放的数据是会进行排序的并且不能存储重复的元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      比较使用的是CompareTo这个方法</span></span><br><span class="line"><span class="comment"> *      在TreeSet里进行排序的不算add方法而是Comparator里面的CompareTo方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      TreeSet里面只能存放相同数据类型的数据值，因为这里需要排序CompareTo方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      当CompareTo前面数字小于后面时，返回-1</span></span><br><span class="line"><span class="comment"> *                  相等时：0</span></span><br><span class="line"><span class="comment"> *                  大于时：1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">treeSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//存入整数后，会去重且按从大到小排序</span></span><br><span class="line"><span class="comment">//        treeSet.add(10);</span></span><br><span class="line"><span class="comment">//        treeSet.add(1);</span></span><br><span class="line"><span class="comment">//        treeSet.add(10);</span></span><br><span class="line"><span class="comment">//        treeSet.add(1);</span></span><br><span class="line"><span class="comment">//        treeSet.add(10);</span></span><br><span class="line"><span class="comment">//        treeSet.add(1);</span></span><br><span class="line"><span class="comment">//        treeSet.add(9);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"><span class="comment">//        treeSet.add(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">//        treeSet.add(&quot;bbb&quot;);</span></span><br><span class="line"><span class="comment">//        treeSet.add(&quot;zzz&quot;);</span></span><br><span class="line"><span class="comment">//        treeSet.add(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">//        treeSet.add(&quot;bbb&quot;);</span></span><br><span class="line"><span class="comment">//        treeSet.add(&quot;zzz&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;a&quot;</span>, <span class="number">18</span>, <span class="number">180.0</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">a0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;a.1&quot;</span>, <span class="number">18</span>, <span class="number">180.0</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;b&quot;</span>, <span class="number">8</span>, <span class="number">130.0</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;c&quot;</span>, <span class="number">20</span>, <span class="number">190.0</span>);</span><br><span class="line"></span><br><span class="line">        treeSet.add(a);</span><br><span class="line">        treeSet.add(a0);</span><br><span class="line">        treeSet.add(b);</span><br><span class="line">        treeSet.add(c);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double height;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, Integer age, Double height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(Double height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, height=&quot;</span> + height +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line"><span class="comment">//        if (s1.age &lt; s2.age )&#123;</span></span><br><span class="line"><span class="comment">//            return -1;</span></span><br><span class="line"><span class="comment">//        &#125;else if (s1.age == s2.age)&#123;</span></span><br><span class="line"><span class="comment">//            return 0;</span></span><br><span class="line"><span class="comment">//        &#125;else &#123;</span></span><br><span class="line"><span class="comment">//            return 1;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line"><span class="comment">//        return s1.age - s2.age;</span></span><br><span class="line">        <span class="comment">//方式三</span></span><br><span class="line">        <span class="comment">//利用Integer的方法去比较排序</span></span><br><span class="line"><span class="comment">//        return s1.age.compareTo(s2.age);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法四</span></span><br><span class="line">        <span class="comment">//修补bug    当年龄一致时去比较身高，当身高一致时，比较名字</span></span><br><span class="line">        <span class="comment">//注意：这里字段都使用的是包装类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">compareTo</span> <span class="operator">=</span> s1.age.compareTo(s2.age);</span><br><span class="line">        <span class="keyword">if</span> (compareTo == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">compareTo1</span> <span class="operator">=</span> s1.height.compareTo(s2.height);</span><br><span class="line">            <span class="keyword">if</span> (compareTo1 == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">compareTo2</span> <span class="operator">=</span> s1.name.compareTo(s2.name);</span><br><span class="line">                <span class="keyword">return</span> compareTo2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> compareTo1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> compareTo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以使用来重写Comparator里的compara方法来比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;Student&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student s1, Student s2)</span> &#123;</span><br><span class="line">               <span class="type">int</span> <span class="variable">compareTo</span> <span class="operator">=</span> s1.getAge().compareTo(s2.getAge());</span><br><span class="line">               <span class="keyword">if</span> (compareTo == <span class="number">0</span>)&#123;</span><br><span class="line">                   <span class="type">int</span> <span class="variable">compareTo1</span> <span class="operator">=</span> s1.getHeight().compareTo(s2.getHeight());</span><br><span class="line">                   <span class="keyword">if</span> (compareTo1 == <span class="number">0</span>)&#123;</span><br><span class="line">                       <span class="type">int</span> <span class="variable">compareTo2</span> <span class="operator">=</span> s1.getName().compareTo(s2.getName());</span><br><span class="line">                       <span class="keyword">return</span> compareTo2;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">return</span> compareTo1;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> compareTo;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-HashMap"><a href="#5-HashMap" class="headerlink" title="5.HashMap"></a>5.HashMap</h2><h3 id="特性：-3"><a href="#特性：-3" class="headerlink" title="特性："></a>特性：</h3><ul><li>&#96;&#96;&#96;<br>特性：存储底层是由数组+链表+红黑树构成<br> 存储无序<br> 存储方式是k-v键值对形式存放，其中k不可以重复v可以重复<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 初始化对象:</span><br><span class="line"></span><br><span class="line">- `</span><br><span class="line">  - `HashMap()`  构造一个默认的初始容量的空  `HashMap`（16）和默认的加载因子（0.75）。 </span><br><span class="line"></span><br><span class="line">- `</span><br><span class="line">  - `HashMap(int initialCapacity)`  构建了一个具有指定的初始容量和加载因子空 `HashMap`（0.75）。</span><br><span class="line"></span><br><span class="line">- `</span><br><span class="line">  - `HashMap(int initialCapacity,  float loadFactor)`  构造一个空 `HashMap`具有指定的初始容量和加载因子。 </span><br><span class="line"></span><br><span class="line">- `</span><br><span class="line">  - `HashMap(Map&lt;?  extends K,? extends V&gt; m)`  构建了一种新的 `HashMap`与指定的 `Map`相同的映射</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 常用方法：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"></span><br><span class="line">public class HashMap_ &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        //添加</span><br><span class="line">        map.put(&quot;aaa&quot;,111);</span><br><span class="line">        map.put(&quot;bbb&quot;,222);</span><br><span class="line">        map.put(&quot;ccc&quot;,333);</span><br><span class="line">        map.put(&quot;ddd&quot;,444);</span><br><span class="line">        map.put(111,&quot;aaa&quot;);</span><br><span class="line"></span><br><span class="line">        //根据k删除数据,返回值为被删除的数据</span><br><span class="line">        System.out.println(&quot;根据k删除数据:(返回被删的value)&quot;);</span><br><span class="line">        Object remove = map.remove(111);</span><br><span class="line">        System.out.println(remove);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //返回 true  如果这Map包含一个指定的键映射。</span><br><span class="line">        System.out.println(&quot;Map包含一个指定的键映射返回boolean&quot;);</span><br><span class="line">        boolean ccc = map.containsKey(&quot;ccc&quot;);</span><br><span class="line">        System.out.println(ccc);</span><br><span class="line"></span><br><span class="line">        //containsKey 返回 true 如果映射到指定的值的一个或多个键</span><br><span class="line">        System.out.println(&quot;映射到指定的值的一个或多个键,判断value是否存在&quot;);</span><br><span class="line">        boolean aaa = map.containsKey(&quot;aaa&quot;);</span><br><span class="line">        System.out.println(aaa);</span><br><span class="line"></span><br><span class="line">        //判断是否为空</span><br><span class="line">        System.out.println(&quot;判断集合是否为空&quot;);</span><br><span class="line">        boolean empty = map.isEmpty();</span><br><span class="line">        System.out.println(empty);</span><br><span class="line"></span><br><span class="line">        //replace(K key, V value)</span><br><span class="line">        //仅当它当前映射到某一值时，替换指定的键的条目。 返回被替换的value</span><br><span class="line">        System.out.println(&quot;替换某个k的内容（返回被替换的value）&quot;);</span><br><span class="line">        Object replace = map.replace(&quot;bbb&quot;, &quot;奥里给&quot;);</span><br><span class="line">        System.out.println(replace);</span><br><span class="line"></span><br><span class="line">        //size()</span><br><span class="line">        //返回这个映射中的键值映射的数目</span><br><span class="line">        System.out.println(&quot;返回这个映射中的键值映射的数目&quot;);</span><br><span class="line">        int size = map.size();</span><br><span class="line">        System.out.println(size);</span><br><span class="line"></span><br><span class="line">        //values 将集合value返回到Collection集合类型下</span><br><span class="line">        System.out.println(&quot;-------------------------&quot;);</span><br><span class="line">        Collection&lt;Object&gt; values = map.values();</span><br><span class="line">        System.out.println(values);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //将map中的key传递给set集合存放</span><br><span class="line">        System.out.println(&quot;-------------------------&quot;);</span><br><span class="line">        Set&lt;Object&gt; objects = map.keySet();</span><br><span class="line">        System.out.println(objects);</span><br><span class="line"></span><br><span class="line">        //get   获取指定key的value值</span><br><span class="line">        Object aaa1 = map.get(&quot;aaa&quot;);</span><br><span class="line">        System.out.println(aaa);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //getOrDefault   将指定key的值替换，若不存在该key则返回要替换的值</span><br><span class="line">        Object orDefault = map.getOrDefault(&quot;222&quot;, &quot;替换&quot;);</span><br><span class="line">        System.out.println(orDefault);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="遍历方法："><a href="#遍历方法：" class="headerlink" title="遍历方法："></a>遍历方法：</h3><p>因为这里是k-v形式存放，不可以使用for循环或者说增强for和迭代器遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line"><span class="comment">//使用entrySet()方法先将键值看成一个个对象对存放到set集合中</span></span><br><span class="line">Set&lt;Map.Entry&lt;Object, Object&gt;&gt; entries = map.entrySet();</span><br><span class="line"><span class="comment">//再使用迭代器或增强for将每个对象取出</span></span><br><span class="line"><span class="keyword">for</span> (Object e:entries</span><br><span class="line">             ) &#123;</span><br><span class="line">             <span class="comment">//将取出的对象转换成entry对象</span></span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) e;</span><br><span class="line">            <span class="comment">//entry对象中有getkey()  和getvalue()方法分别取得k 和  v</span></span><br><span class="line">             System.out.println(entry.getKey());</span><br><span class="line">            System.out.println(entry.getValue());</span><br><span class="line">           <span class="comment">//至此可以达到遍历的目的</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用keySet()方法将map中key都存到一个set集合中</span></span><br><span class="line">Set&lt;Object&gt; objects = map.keySet();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//此时我们就可以使用迭代器或增强for的方式先取出存在set中的key值</span></span><br><span class="line"> <span class="keyword">for</span> (Object s : objects</span><br><span class="line">      ) &#123;</span><br><span class="line">            System.out.println(s + <span class="string">&quot;值为：&quot;</span> +map.get(s));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(objects);</span><br><span class="line">      &#125;</span><br><span class="line">System.out.println(<span class="string">&quot;--------keySet的迭代器方法---------&quot;</span>);</span><br><span class="line">        Iterator&lt;Object&gt; iterator = objects.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">        System.out.println(key +<span class="string">&quot;的值为：&quot;</span>+map.get(key));</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-HashTable"><a href="#6-HashTable" class="headerlink" title="6.HashTable"></a>6.HashTable</h2><h3 id="特性：-4"><a href="#特性：-4" class="headerlink" title="特性："></a>特性：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">与HashMap一样都是K-V键值对形式存放数据，但是 不支持存放<span class="literal">null</span>作为K值</span><br><span class="line">无序存放</span><br><span class="line">线程安全</span><br><span class="line">类继承上实现了Map接口和Dictionary抽象类</span><br><span class="line">扩容机制上，HashMap扩容时是直接翻倍，HashTable是翻倍后+<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="初始化对象：-1"><a href="#初始化对象：-1" class="headerlink" title="初始化对象："></a>初始化对象：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Hashtable() </span><br><span class="line">//构建一个新的空哈希表默认初始容量（11）和负载因子（0.75）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hashtable(int initialCapacity) </span><br><span class="line">//构建一个新的空哈希表指定初始容量和加载因子（0.75）。 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hashtable(int initialCapacity, float loadFactor) </span><br><span class="line">//构建一个新的空哈希表的指定初始容量和负载因子。 </span><br><span class="line"></span><br><span class="line">Hashtable(Map&lt;? extends K,? extends V&gt; t) </span><br><span class="line">//构建了一种新的哈希表作为给定Map相同的映射。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-TreeMap"><a href="#7-TreeMap" class="headerlink" title="7.TreeMap"></a>7.TreeMap</h2><h2 id="特性：-5"><a href="#特性：-5" class="headerlink" title="特性："></a>特性：</h2><p>和TreeSet类似，有序，Key不可以存在重复值，当key为一个类时这个类需要实现Comparable的compareTo方法去自定义排序方法</p><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMap_01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//        map.put(&quot;aaa&quot;,111);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;ccc&quot;,333);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;bbb&quot;,222);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;ddd&quot;,444);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(map);</span></span><br><span class="line">        map.put(<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aaa&quot;</span>,<span class="number">11</span>));</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bbb&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bbb&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bbb&quot;</span>,<span class="number">12</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s1.age.compareTo(s2.age) == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s1.name.compareTo(s2.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s1.age.compareTo(s2.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理也可以在创建时使用 这种方式提前规定判断规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TreeMap&lt;Student,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;Student,Integer&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="7-Collections工具类"><a href="#7-Collections工具类" class="headerlink" title="7.Collections工具类"></a>7.Collections工具类</h2><h3 id="常用方法：-1"><a href="#常用方法：-1" class="headerlink" title="常用方法："></a>常用方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回最小的元素的集合，根据其元素的自然排序。 </span></span><br><span class="line">min(Collection&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>&gt; coll)</span><br><span class="line"><span class="comment">//返回给定集合的最小元素，根据指定的比较器诱导的顺序。</span></span><br><span class="line">min(Collection&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>&gt; coll, Comparator&lt;? <span class="built_in">super</span> T&gt; comp) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回最大元素的集合，根据其元素的自然排序</span></span><br><span class="line">max(Collection&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>&gt; coll) </span><br><span class="line"></span><br><span class="line"><span class="comment">//返回给定集合的最大元素，根据指定的比较器诱导的顺序。</span></span><br><span class="line">max(Collection&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>&gt; coll, Comparator&lt;? <span class="built_in">super</span> T&gt; comp) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//反转指定列表中元素的顺序</span></span><br><span class="line">reverse(List&lt;?&gt; list) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//指定列表为升序排序，根据其元素的 natural ordering。</span></span><br><span class="line">sort(List&lt;T&gt; list) </span><br><span class="line"></span><br><span class="line"><span class="comment">//根据指定的比较器指定的顺序对指定的列表进行排序。</span></span><br><span class="line">sort(List&lt;T&gt; list, Comparator&lt;? <span class="built_in">super</span> T&gt; c) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位移运算符和逻辑位移运算符</title>
      <link href="/2020/09/30/%E4%BD%8D%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%80%BB%E8%BE%91%E4%BD%8D%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2020/09/30/%E4%BD%8D%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%80%BB%E8%BE%91%E4%BD%8D%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="位移运算符和逻辑位移运算符"><a href="#位移运算符和逻辑位移运算符" class="headerlink" title="位移运算符和逻辑位移运算符"></a>位移运算符和逻辑位移运算符</h1><p>先讲述一下 反码  补码的 定义</p><p>正数时，原码&#x3D;反码&#x3D;补码</p><p>负数时，反码&#x3D;原码除第一位其余位置取相反数  即  0  取  1    1 取  0</p><p>补码 &#x3D; 反码低位+1   </p><p>正负定义 ：<strong>最高位是符号位，0代表正数，1代表负数，非符号位为该数字绝对值的二进制。</strong></p><p><strong>在计算机中，数值转换一律用补码来表示（存储）</strong></p><p>当强转时，应当先将先转换成二进制后取对应位数后，将原码转换成反码再转补码</p><p>例如    int i &#x3D;  129    int占用四个字节，一个字节八位  即32位   转换为二进制就是    00000000 00000000 00000000 10000001</p><p>强转为  byte类型   byte占用一个字节，即8位   取int的八位    10000001  再取反码   -》     11111110  -》 再取补码   11111111</p><p>又最高位代表正负   即  转换位byte   就是  -127</p><h2 id="位移运算符（-lt-lt-、-gt-gt-）"><a href="#位移运算符（-lt-lt-、-gt-gt-）" class="headerlink" title="位移运算符（&lt;&lt;   、   &gt;&gt;）"></a>位移运算符（&lt;&lt;   、   &gt;&gt;）</h2><h3 id="向左位移运算符"><a href="#向左位移运算符" class="headerlink" title="向左位移运算符"></a>向左位移运算符</h3><p>当左移时不管正副，低位补0</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正数： r = <span class="number">20</span> &lt;&lt; <span class="number">2</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">20的二进制</th><th align="center">1 0100</th></tr></thead><tbody><tr><td align="center"><strong>二进制补码</strong></td><td align="center"><strong>0101 0000</strong></td></tr><tr><td align="center">向左移动两位后：</td><td align="center"><strong>0101 0000</strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射-reflect</title>
      <link href="/2020/09/30/%E5%8F%8D%E5%B0%84-reflect/"/>
      <url>/2020/09/30/%E5%8F%8D%E5%B0%84-reflect/</url>
      
        <content type="html"><![CDATA[<h1 id="反射-reflect"><a href="#反射-reflect" class="headerlink" title="反射-reflect"></a>反射-reflect</h1><h2 id="反射引入"><a href="#反射引入" class="headerlink" title="反射引入"></a>反射引入</h2><p>当我们在只有更改配置文件的情况下，不更改源码，如何创建不同对象且调用这个对象的不同方法？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分析发现传统方法实现不了这个需求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此时，我们就可以通过  反射来完成这个需求</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用反射机制实现</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">newTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">//先读取re.properties中的内容</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//配置文件地址</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\com\\sys\\reflect\\re.properties&quot;</span>);</span><br><span class="line">        properties.load(fileInputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出里面存放对应的内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">classfullpath</span> <span class="operator">=</span> properties.get(<span class="string">&quot;classfullpath&quot;</span>).toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> properties.get(<span class="string">&quot;method&quot;</span>).toString();</span><br><span class="line">        <span class="comment">//1.加载类  返回一个Class类型的对象</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(classfullpath);</span><br><span class="line">        <span class="comment">//通过cls得到加载的类的对象实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;我的类型是&quot;</span>+o.getClass());</span><br><span class="line">        <span class="comment">//通过getMethod(method)得到Cat中方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> cls.getMethod(method);</span><br><span class="line">        <span class="comment">//再可以使用方法对象调用方法invoke();传入方法所属的对象</span></span><br><span class="line">        method1.invoke(o);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个时候，我们只需要更改配置文件中对应的值，就可以实现不改源码，创建需要的对象和调用对象方法了</p><h2 id="方法使用"><a href="#方法使用" class="headerlink" title="方法使用"></a>方法使用</h2><h3 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h3><p>也可以获取类的构造器   <strong>.getConstructors()</strong> 获取所有的构造器放入数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getConstructor01</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.itymsd.i.RefectionStudy.Student&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt;[] constructor = aClass.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor c: constructor</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.getDeclaredConstructor(); 获取指定参数不同的构造器</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getConstructor02</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.itymsd.i.RefectionStudy.Student&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor(String.class, Integer.class);</span><br><span class="line">        System.out.println(declaredConstructor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回所有的构造方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchMethodException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvocationTargetException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getConstructor04</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">//使用一下Constructor的方法</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.itymsd.i.RefectionStudy.Student&quot;</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructor1 = aClass.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : declaredConstructor1) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*返回指定的构造方法，包括private修饰的   .getDeclaredConstructor(参数类型，参数类型)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getConstructor05</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.itymsd.i.RefectionStudy.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor(String.class,Integer.class);</span><br><span class="line">        System.out.println(declaredConstructor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建实例对象"><a href="#创建实例对象" class="headerlink" title="创建实例对象"></a>创建实例对象</h2><p>获取构造器后   可以使用  .newInstance(“张三”)；创建有参构造去新建立一个实例   当然此方法不能使用在private的构造器上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getConstructor03</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">//使用一下Constructor的方法</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.itymsd.i.RefectionStudy.Student&quot;</span>);</span><br><span class="line"><span class="comment">//        Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor(String.class, Integer.class);</span></span><br><span class="line"><span class="comment">//        Object obj = declaredConstructor.newInstance(&quot;张三&quot;, 16);</span></span><br><span class="line"><span class="comment">//        System.out.println(obj);</span></span><br><span class="line">        <span class="comment">//此时是无法访问到的，因为此构造方法是private的</span></span><br><span class="line">        <span class="comment">//但是我们使用.setAccessible(true)时，就可以强行构造无视private</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="获取字段方法"><a href="#获取字段方法" class="headerlink" title="获取字段方法"></a>获取字段方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拿到所有公共字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchFieldException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestGetField</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">studentClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line"></span><br><span class="line">        Field[] fields = studentClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f:fields</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定的公共字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchFieldException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestGetField02</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        Class&lt;Student&gt; studentClass = Student.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> studentClass.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentClass.newInstance();</span><br><span class="line">        field.set(student,<span class="string">&quot;李华&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定的private字段并设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchFieldException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchMethodException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvocationTargetException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestGetField03</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, NoSuchFieldException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        Class&lt;Student&gt; studentClass = Student.class;</span><br><span class="line">        Constructor&lt;Student&gt; declaredConstructor = studentClass.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> studentClass.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> declaredConstructor.newInstance(<span class="string">&quot;李华&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        age.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        age.set(student,<span class="number">20</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合区别总结</title>
      <link href="/2020/09/30/%E9%9B%86%E5%90%88%E5%8C%BA%E5%88%AB%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/30/%E9%9B%86%E5%90%88%E5%8C%BA%E5%88%AB%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="集合区别总结"><a href="#集合区别总结" class="headerlink" title="集合区别总结"></a>集合区别总结</h1><h2 id="ArrayList和LinkList的区别"><a href="#ArrayList和LinkList的区别" class="headerlink" title="ArrayList和LinkList的区别"></a>ArrayList和LinkList的区别</h2><p>1.首先ArrayList底层是数组结构，LinkList是双向链表结构</p><p>2.在查询效率上由于ArrayList底层是数组结构，查询比LinkList快</p><p>增删方面上，由于每次ArrayList操作都需要数组的变化，LinkList链表结构在这方面更快</p><p>3.在存储方面，LinkList比ArrayList开销大，因为链表结构每次除了存储数据元素，还要存储对前后元素的引用</p><h2 id="List-Set-Map的区别"><a href="#List-Set-Map的区别" class="headerlink" title="List,Set,Map的区别"></a>List,Set,Map的区别</h2><p>1.<strong>首先接口上</strong></p><p>List和Set都是Collection的子接口，而Map不是</p><p>2.<strong>存储上</strong></p><p>List可以通过索引来存取元素，元素可以重复，是有序的，可以存储null</p><p>Set不能存放重复，且元素无序，只允许一个null</p><p>Map是属于键值对类型，一对一或一对多</p><p>3.<strong>结构上</strong></p><p>List由链表和数组构成</p><p>Set、Map容器有基于哈希存储和红黑树两种方式实现</p><p>Set基于Map实现、Set里的元素值就是Map的键值</p><p>4.<strong>线程安全上</strong>，</p><p>List下的Vector集合和Map下的HashTable是属于线程安全的</p><h2 id="HashMap-和-HashTable的区别和共同点"><a href="#HashMap-和-HashTable的区别和共同点" class="headerlink" title="HashMap 和 HashTable的区别和共同点"></a>HashMap 和 HashTable的区别和共同点</h2><p><strong>1.共同点：</strong></p><p><strong>结构上：</strong></p><p>HashMap和HashTable底层都是由数组+链表+红黑树实现</p><p><strong>2.区别：</strong></p><p><strong>是否可以存空？</strong></p><p>HashMap可以存储空的键值，HashTable键值都不能为空</p><p><strong>线程安全？</strong></p><p>HashMap是线程不安全的，HashTable使用了synchronized关键字所以在线程上是安全的</p><p><strong>初始容量上</strong></p><p>HashMap初始容量为16，每次扩容都是2的n次幂，HashTable初始容量为11扩容是是翻倍+</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九大对象和四大作用域</title>
      <link href="/2020/09/30/%E4%B9%9D%E5%A4%A7%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%9B%9B%E5%A4%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2020/09/30/%E4%B9%9D%E5%A4%A7%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%9B%9B%E5%A4%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="九大对象和四大作用域"><a href="#九大对象和四大作用域" class="headerlink" title="九大对象和四大作用域"></a>九大对象和四大作用域</h1><h2 id="九大对象"><a href="#九大对象" class="headerlink" title="九大对象"></a>九大对象</h2><ul><li><p><strong>1.request</strong></p><ul><li>封装客户端的请求，其中包含来自 get 或 post 请求的参数；</li></ul></li><li><p><strong>2.response</strong></p><ul><li>封装服务器对客户端的响应；</li></ul></li><li><p><strong>3.page</strong></p><ul><li>JSP页面本身（相当于 Java 程序中的 this）；</li></ul></li><li><p><strong>4.pageContext</strong></p><ul><li>pageContext：通过该对象可以获取其他对象；</li></ul></li><li><p><strong>5.config</strong></p><ul><li>Web应用的配置对象；</li></ul></li><li><p><strong>6.application</strong></p><ul><li>封装服务器运行环境的对象</li></ul></li><li><p><strong>7.session</strong></p><ul><li>封装用户会话的对象；</li></ul></li><li><p><strong>8.out</strong></p><ul><li>输出服务器响应的输出流对象；</li></ul></li><li><p><strong>9.exception</strong></p><ul><li>封装页面抛出异常的对象</li></ul></li></ul><h2 id="四大作用域"><a href="#四大作用域" class="headerlink" title="四大作用域"></a>四大作用域</h2><ul><li><p><strong>session</strong></p><ul><li>代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的 session 中</li></ul></li><li><p><strong>application</strong></p><ul><li>代表与整个 Web 应用程序相关的对象和属性，它实质上是跨越整个 Web 应用程序，包括多个页面、请求和会话的一个全局作用域。</li></ul></li><li><p><strong>page</strong></p><ul><li>代表与一个页面相关的对象和属性</li></ul></li><li><p><strong>requset</strong></p><ul><li>代表与客户端发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个 Web 组件；需要在页面显示的临时数据可以置于此作用域。</li></ul></li></ul><h2 id="session和cookie"><a href="#session和cookie" class="headerlink" title="session和cookie"></a>session和cookie</h2><h3 id="一、区别"><a href="#一、区别" class="headerlink" title="一、区别"></a>一、区别</h3><ul><li><p>1.存储</p><ul><li>存储位置不同，session存储在服务端，cookie存储在客户端且容量有限制</li></ul></li><li><p>2.安全性</p><ul><li>cookie存储在客户端，是可以被更改和伪造的，安全性不高</li></ul></li><li><p>3.多样性</p><ul><li>session可以存储在数据库，中间件、应用程序中而cookie只能存储在浏览器</li></ul></li></ul><h3 id="二、工作原理"><a href="#二、工作原理" class="headerlink" title="二、工作原理"></a>二、工作原理</h3><p>session的工作原理就是客户端完成登入后，服务器会创建相应的session，session创建完成后，会将session的id发送给客户端，客户端再存储在浏览器中，这样浏览器每次访问浏览器时都会带着sessionid,服务器拿着sessionid去内存中查找对应的session，这样就可以正常工作了</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
